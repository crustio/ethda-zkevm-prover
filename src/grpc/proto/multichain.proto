syntax = "proto3";

package multichain.v1;

option go_package = "github.com/0xPolygonHermez/zkevm-node/proverclient/pb";

message Version {
    string v0_0_1 = 1;
}

// timestamps are represented in unix time in seconds

/**
 * Define all methods implementes by the gRPC
 * Channel: prover receives multichain messages and returns prover messages with the same id
 */
service MultichainService {
    rpc Channel(stream ProverMessage) returns (stream MultichainMessage) {}
}

message MultichainMessage
{
    string id = 1;
    oneof request
    {
        GetStatusRequest get_status_request = 2;
        GenPrepareMultichainProofRequest gen_prepare_multichain_proof_request = 3;
        GenAggregatedMultichainProofRequest gen_aggregated_multichain_proof_request = 4;
        GenFinalMultichainProofRequest gen_final_multichain_proof_request = 5;
        CancelRequest cancel_request = 6;
        GetProofRequest get_proof_request = 7;
        CalculateSha256Request calculate_sha256_request = 8;
    }
}

message ProverMessage
{
    string id = 1;
    oneof response
    {
        GetStatusResponse get_status_response = 2;
        GenPrepareMultichainProofResponse gen_prepare_multichain_proof_response = 3;
        GenAggregatedMultichainProofResponse gen_aggregated_multichain_proof_response = 4;
        GenFinalMultichainProofResponse gen_final_multichain_proof_response = 5;
        CancelResponse cancel_response = 6;
        GetProofResponse get_proof_response = 7;
        CalculateSha256Response calculate_sha256_response = 8;
    }
}

///////////////////
// Request messages
///////////////////

/**
 * @dev GetStatusRequest
 */
message GetStatusRequest {}

/**
 * @dev GenPrepareMultichainProofRequest
 * @param {recursive_proof} - proof json of the chain you want to aggregate
 * @param {previous_hash} - hash of the last sha256 block added when aggregating different chain proofs
 */
message GenPrepareMultichainProofRequest {
    string recursive_proof = 1;
    string previous_hash = 2;
}

/**
 * @dev GenAggregatedMultichainProofRequest
 * @param {multichain_proof_1} - proof json of the first chain proof to aggregate
 * @param {multichain_proof_2} - proof json of the second chain proof to aggregate
 */
message GenAggregatedMultichainProofRequest {
    string multichain_proof_1 = 1;
    string multichain_proof_2 = 2;
}

/**
 * @dev GenFinalMultichainProofRequest
 * @param {multichain_proof} - proof json of the chain or aggregated chains to finalise
 * @param {aggregator_addr} - address of the aggregator
 */
message GenFinalMultichainProofRequest {
    string multichain_proof = 1;
    string aggregator_addr = 2;
}

/**
 * @dev CancelRequest
 * @param {id} - identifier of the proof request to cancel
 */
 message CancelRequest {
    string id = 1;
}

/**
 * @dev Request GetProof
 * @param {id} - proof identifier of the proof request
 * @param {timeout} - time to wait until the service responds
 */
message GetProofRequest {
    string id = 1;
    uint64 timeout = 2;
}

/**
 * @dev Request CalculateSha256
 * @param {publics}
 * @param {previous_hash} - last hash output
 */
message CalculateSha256Request
{
    string publics = 1;
    string previous_hash = 2;
}
/////////////////////
// Responses messages
/////////////////////

/**
 * @dev Response GetStatus
 * @param {status} - server status
 * - BOOTING: being ready to compute proofs
 * - COMPUTING: busy computing a proof
 * - IDLE: waiting for a proof to compute
 * - HALT: stop
 * @param {last_computed_request_id} - last proof identifier that has been computed
 * @param {last_computed_end_time} - last proof timestamp when it was finished
 * @param {current_computing_request_id} - id of the proof that is being computed
 * @param {current_computing_start_time} - timestamp when the proof that is being computed started
 * @param {version_proto} - .proto verion
 * @param {version_server} - server version
 * @param {pending_request_queue_ids} - list of identifierss of proof requests that are in the pending queue
 * @param {prover_name} - id of this prover server, normally specified via config.json, or UNSPECIFIED otherwise; it does not change if prover reboots
 * @param {prover_id} - id of this prover instance or reboot; it changes if prover reboots; it is a UUID, automatically generated during the initialization
 * @param {number_of_cores} - number of cores in the system where the prover is running
 * @param {total_memory} - total memory in the system where the prover is running
 * @param {free_memory} - free memory in the system where the prover is running
 */
message GetStatusResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_BOOTING = 1;
        STATUS_COMPUTING = 2;
        STATUS_IDLE = 3;
        STATUS_HALT = 4;
    }
    Status status = 1;
    string last_computed_request_id = 2;
    uint64 last_computed_end_time = 3;
    string current_computing_request_id = 4;
    uint64 current_computing_start_time = 5;
    string version_proto = 6;
    string version_server = 7;
    repeated string pending_request_queue_ids = 8;
    string prover_name = 9;
    string prover_id = 10;
    uint64 number_of_cores = 11;
    uint64 total_memory = 12;
    uint64 free_memory = 13;
    uint64 fork_id = 14;
}

/**
 * @dev Result
 *  - OK: succesfully completed
 *  - ERROR: request is not correct, i.e. input data is wrong
 *  - INTERNAL_ERROR: internal server error when delivering the response
 */
enum Result {
    RESULT_UNSPECIFIED = 0;
    RESULT_OK = 1;
    RESULT_ERROR = 2;
    RESULT_INTERNAL_ERROR = 3;
}

/**
 * @dev GenPrepareMultichainProofResponse
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenPrepareMultichainProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev GenAggregatedMultichainProofResponse
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenAggregatedMultichainProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev Response GenFinalMultichainProofResponse
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenFinalMultichainProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev CancelResponse
 * @param {result} - request result
 */
message CancelResponse {
    Result result = 1;
}

/**
 * @dev GetProofResponse
 * @param {id} - proof identifier
 * @param {final_proof} - groth16 proof + public circuit inputs
 * @param {recursive_proof} - recursive proof json
 * @param {result} - proof result
 *  - COMPLETED_OK: proof has been computed successfully and it is valid
 *  - ERROR: request error
 *  - COMPLETED_ERROR: proof has been computed successfully and it is not valid
 *  - PENDING: proof is being computed
 *  - INTERNAL_ERROR: server error during proof computation
 *  - CANCEL: proof has been cancelled
 * @param {result_string} - extends result information
 */
message GetProofResponse {
    enum Result {
        RESULT_UNSPECIFIED = 0;
        RESULT_COMPLETED_OK = 1;
        RESULT_ERROR = 2;
        RESULT_COMPLETED_ERROR = 3;
        RESULT_PENDING = 4;
        RESULT_INTERNAL_ERROR = 5;
        RESULT_CANCEL = 6;
    }
    string id = 1;
    oneof proof {
        PrepareProof prepare_proof = 2;
        string multichain_proof = 3;
    }
    Result result = 4;
    string result_string = 5;
}

/*
 * @dev PrepareProof
 * @param {proof} - multichain proof
 * @param {hash_info} - Last hash Info
*/
message PrepareProof {
    string proof = 1;
    string hash_info = 2;
}

/*
 * @dev CalculateSha256Response
 * @param {out_hash} - Output hash after adding the publics
*/
message CalculateSha256Response
{
    string out_hash = 1;
}
