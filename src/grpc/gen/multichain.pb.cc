// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multichain.proto

#include "multichain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateSha256Request_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateSha256Response_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelRequest_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponse_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenAggregatedMultichainProofRequest_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenAggregatedMultichainProofResponse_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenFinalMultichainProofRequest_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenFinalMultichainProofResponse_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenPrepareMultichainProofRequest_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenPrepareMultichainProofResponse_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProofRequest_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProofResponse_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusRequest_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusResponse_multichain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multichain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareProof_multichain_2eproto;
namespace multichain {
namespace v1 {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class MultichainMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultichainMessage> _instance;
  const ::multichain::v1::GetStatusRequest* get_status_request_;
  const ::multichain::v1::GenPrepareMultichainProofRequest* gen_prepare_multichain_proof_request_;
  const ::multichain::v1::GenAggregatedMultichainProofRequest* gen_aggregated_multichain_proof_request_;
  const ::multichain::v1::GenFinalMultichainProofRequest* gen_final_multichain_proof_request_;
  const ::multichain::v1::CancelRequest* cancel_request_;
  const ::multichain::v1::GetProofRequest* get_proof_request_;
  const ::multichain::v1::CalculateSha256Request* calculate_sha256_request_;
} _MultichainMessage_default_instance_;
class ProverMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProverMessage> _instance;
  const ::multichain::v1::GetStatusResponse* get_status_response_;
  const ::multichain::v1::GenPrepareMultichainProofResponse* gen_prepare_multichain_proof_response_;
  const ::multichain::v1::GenAggregatedMultichainProofResponse* gen_aggregated_multichain_proof_response_;
  const ::multichain::v1::GenFinalMultichainProofResponse* gen_final_multichain_proof_response_;
  const ::multichain::v1::CancelResponse* cancel_response_;
  const ::multichain::v1::GetProofResponse* get_proof_response_;
  const ::multichain::v1::CalculateSha256Response* calculate_sha256_response_;
} _ProverMessage_default_instance_;
class GetStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusRequest> _instance;
} _GetStatusRequest_default_instance_;
class GenPrepareMultichainProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenPrepareMultichainProofRequest> _instance;
} _GenPrepareMultichainProofRequest_default_instance_;
class GenAggregatedMultichainProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenAggregatedMultichainProofRequest> _instance;
} _GenAggregatedMultichainProofRequest_default_instance_;
class GenFinalMultichainProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenFinalMultichainProofRequest> _instance;
} _GenFinalMultichainProofRequest_default_instance_;
class CancelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelRequest> _instance;
} _CancelRequest_default_instance_;
class GetProofRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProofRequest> _instance;
} _GetProofRequest_default_instance_;
class CalculateSha256RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateSha256Request> _instance;
} _CalculateSha256Request_default_instance_;
class GetStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusResponse> _instance;
} _GetStatusResponse_default_instance_;
class GenPrepareMultichainProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenPrepareMultichainProofResponse> _instance;
} _GenPrepareMultichainProofResponse_default_instance_;
class GenAggregatedMultichainProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenAggregatedMultichainProofResponse> _instance;
} _GenAggregatedMultichainProofResponse_default_instance_;
class GenFinalMultichainProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenFinalMultichainProofResponse> _instance;
} _GenFinalMultichainProofResponse_default_instance_;
class CancelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelResponse> _instance;
} _CancelResponse_default_instance_;
class GetProofResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetProofResponse> _instance;
  const ::multichain::v1::PrepareProof* prepare_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multichain_proof_;
} _GetProofResponse_default_instance_;
class PrepareProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareProof> _instance;
} _PrepareProof_default_instance_;
class CalculateSha256ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateSha256Response> _instance;
} _CalculateSha256Response_default_instance_;
}  // namespace v1
}  // namespace multichain
static void InitDefaultsscc_info_CalculateSha256Request_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_CalculateSha256Request_default_instance_;
    new (ptr) ::multichain::v1::CalculateSha256Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::CalculateSha256Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateSha256Request_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CalculateSha256Request_multichain_2eproto}, {}};

static void InitDefaultsscc_info_CalculateSha256Response_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_CalculateSha256Response_default_instance_;
    new (ptr) ::multichain::v1::CalculateSha256Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::CalculateSha256Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateSha256Response_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CalculateSha256Response_multichain_2eproto}, {}};

static void InitDefaultsscc_info_CancelRequest_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_CancelRequest_default_instance_;
    new (ptr) ::multichain::v1::CancelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::CancelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelRequest_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelRequest_multichain_2eproto}, {}};

static void InitDefaultsscc_info_CancelResponse_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_CancelResponse_default_instance_;
    new (ptr) ::multichain::v1::CancelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::CancelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponse_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelResponse_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GenAggregatedMultichainProofRequest_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GenAggregatedMultichainProofRequest_default_instance_;
    new (ptr) ::multichain::v1::GenAggregatedMultichainProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GenAggregatedMultichainProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenAggregatedMultichainProofRequest_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenAggregatedMultichainProofRequest_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GenAggregatedMultichainProofResponse_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GenAggregatedMultichainProofResponse_default_instance_;
    new (ptr) ::multichain::v1::GenAggregatedMultichainProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GenAggregatedMultichainProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenAggregatedMultichainProofResponse_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenAggregatedMultichainProofResponse_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GenFinalMultichainProofRequest_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GenFinalMultichainProofRequest_default_instance_;
    new (ptr) ::multichain::v1::GenFinalMultichainProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GenFinalMultichainProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenFinalMultichainProofRequest_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenFinalMultichainProofRequest_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GenFinalMultichainProofResponse_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GenFinalMultichainProofResponse_default_instance_;
    new (ptr) ::multichain::v1::GenFinalMultichainProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GenFinalMultichainProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenFinalMultichainProofResponse_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenFinalMultichainProofResponse_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GenPrepareMultichainProofRequest_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GenPrepareMultichainProofRequest_default_instance_;
    new (ptr) ::multichain::v1::GenPrepareMultichainProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GenPrepareMultichainProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenPrepareMultichainProofRequest_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenPrepareMultichainProofRequest_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GenPrepareMultichainProofResponse_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GenPrepareMultichainProofResponse_default_instance_;
    new (ptr) ::multichain::v1::GenPrepareMultichainProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GenPrepareMultichainProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenPrepareMultichainProofResponse_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenPrepareMultichainProofResponse_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GetProofRequest_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GetProofRequest_default_instance_;
    new (ptr) ::multichain::v1::GetProofRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GetProofRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetProofRequest_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetProofRequest_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GetProofResponse_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GetProofResponse_default_instance_;
    new (ptr) ::multichain::v1::GetProofResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GetProofResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetProofResponse_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetProofResponse_multichain_2eproto}, {
      &scc_info_PrepareProof_multichain_2eproto.base,}};

static void InitDefaultsscc_info_GetStatusRequest_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GetStatusRequest_default_instance_;
    new (ptr) ::multichain::v1::GetStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GetStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusRequest_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStatusRequest_multichain_2eproto}, {}};

static void InitDefaultsscc_info_GetStatusResponse_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_GetStatusResponse_default_instance_;
    new (ptr) ::multichain::v1::GetStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::GetStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStatusResponse_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStatusResponse_multichain_2eproto}, {}};

static void InitDefaultsscc_info_MultichainMessage_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_MultichainMessage_default_instance_;
    new (ptr) ::multichain::v1::MultichainMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::MultichainMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MultichainMessage_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_MultichainMessage_multichain_2eproto}, {
      &scc_info_GetStatusRequest_multichain_2eproto.base,
      &scc_info_GenPrepareMultichainProofRequest_multichain_2eproto.base,
      &scc_info_GenAggregatedMultichainProofRequest_multichain_2eproto.base,
      &scc_info_GenFinalMultichainProofRequest_multichain_2eproto.base,
      &scc_info_CancelRequest_multichain_2eproto.base,
      &scc_info_GetProofRequest_multichain_2eproto.base,
      &scc_info_CalculateSha256Request_multichain_2eproto.base,}};

static void InitDefaultsscc_info_PrepareProof_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_PrepareProof_default_instance_;
    new (ptr) ::multichain::v1::PrepareProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::PrepareProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareProof_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareProof_multichain_2eproto}, {}};

static void InitDefaultsscc_info_ProverMessage_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_ProverMessage_default_instance_;
    new (ptr) ::multichain::v1::ProverMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::ProverMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ProverMessage_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ProverMessage_multichain_2eproto}, {
      &scc_info_GetStatusResponse_multichain_2eproto.base,
      &scc_info_GenPrepareMultichainProofResponse_multichain_2eproto.base,
      &scc_info_GenAggregatedMultichainProofResponse_multichain_2eproto.base,
      &scc_info_GenFinalMultichainProofResponse_multichain_2eproto.base,
      &scc_info_CancelResponse_multichain_2eproto.base,
      &scc_info_GetProofResponse_multichain_2eproto.base,
      &scc_info_CalculateSha256Response_multichain_2eproto.base,}};

static void InitDefaultsscc_info_Version_multichain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multichain::v1::_Version_default_instance_;
    new (ptr) ::multichain::v1::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multichain::v1::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_multichain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_multichain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_multichain_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_multichain_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_multichain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_multichain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::Version, v0_0_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::MultichainMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::MultichainMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::MultichainMessage, id_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, get_status_request_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, gen_prepare_multichain_proof_request_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, gen_aggregated_multichain_proof_request_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, gen_final_multichain_proof_request_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, cancel_request_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, get_proof_request_),
  offsetof(::multichain::v1::MultichainMessageDefaultTypeInternal, calculate_sha256_request_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::MultichainMessage, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::ProverMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::ProverMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::ProverMessage, id_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, get_status_response_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, gen_prepare_multichain_proof_response_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, gen_aggregated_multichain_proof_response_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, gen_final_multichain_proof_response_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, cancel_response_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, get_proof_response_),
  offsetof(::multichain::v1::ProverMessageDefaultTypeInternal, calculate_sha256_response_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::ProverMessage, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenPrepareMultichainProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenPrepareMultichainProofRequest, recursive_proof_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenPrepareMultichainProofRequest, previous_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenAggregatedMultichainProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenAggregatedMultichainProofRequest, multichain_proof_1_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenAggregatedMultichainProofRequest, multichain_proof_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenFinalMultichainProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenFinalMultichainProofRequest, multichain_proof_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenFinalMultichainProofRequest, aggregator_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CancelRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofRequest, id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CalculateSha256Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CalculateSha256Request, publics_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CalculateSha256Request, previous_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, last_computed_request_id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, last_computed_end_time_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, current_computing_request_id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, current_computing_start_time_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, version_proto_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, version_server_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, pending_request_queue_ids_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, prover_name_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, prover_id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, number_of_cores_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, total_memory_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, free_memory_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetStatusResponse, fork_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenPrepareMultichainProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenPrepareMultichainProofResponse, id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenPrepareMultichainProofResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenAggregatedMultichainProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenAggregatedMultichainProofResponse, id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenAggregatedMultichainProofResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenFinalMultichainProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenFinalMultichainProofResponse, id_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GenFinalMultichainProofResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CancelResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofResponse, id_),
  offsetof(::multichain::v1::GetProofResponseDefaultTypeInternal, prepare_proof_),
  offsetof(::multichain::v1::GetProofResponseDefaultTypeInternal, multichain_proof_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofResponse, result_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofResponse, result_string_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::GetProofResponse, proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::PrepareProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::PrepareProof, proof_),
  PROTOBUF_FIELD_OFFSET(::multichain::v1::PrepareProof, hash_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CalculateSha256Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multichain::v1::CalculateSha256Response, out_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::multichain::v1::Version)},
  { 6, -1, sizeof(::multichain::v1::MultichainMessage)},
  { 20, -1, sizeof(::multichain::v1::ProverMessage)},
  { 34, -1, sizeof(::multichain::v1::GetStatusRequest)},
  { 39, -1, sizeof(::multichain::v1::GenPrepareMultichainProofRequest)},
  { 46, -1, sizeof(::multichain::v1::GenAggregatedMultichainProofRequest)},
  { 53, -1, sizeof(::multichain::v1::GenFinalMultichainProofRequest)},
  { 60, -1, sizeof(::multichain::v1::CancelRequest)},
  { 66, -1, sizeof(::multichain::v1::GetProofRequest)},
  { 73, -1, sizeof(::multichain::v1::CalculateSha256Request)},
  { 80, -1, sizeof(::multichain::v1::GetStatusResponse)},
  { 99, -1, sizeof(::multichain::v1::GenPrepareMultichainProofResponse)},
  { 106, -1, sizeof(::multichain::v1::GenAggregatedMultichainProofResponse)},
  { 113, -1, sizeof(::multichain::v1::GenFinalMultichainProofResponse)},
  { 120, -1, sizeof(::multichain::v1::CancelResponse)},
  { 126, -1, sizeof(::multichain::v1::GetProofResponse)},
  { 137, -1, sizeof(::multichain::v1::PrepareProof)},
  { 144, -1, sizeof(::multichain::v1::CalculateSha256Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_MultichainMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_ProverMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GetStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GenPrepareMultichainProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GenAggregatedMultichainProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GenFinalMultichainProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_CancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GetProofRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_CalculateSha256Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GetStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GenPrepareMultichainProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GenAggregatedMultichainProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GenFinalMultichainProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_CancelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_GetProofResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_PrepareProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multichain::v1::_CalculateSha256Response_default_instance_),
};

const char descriptor_table_protodef_multichain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020multichain.proto\022\rmultichain.v1\"\031\n\007Ver"
  "sion\022\016\n\006v0_0_1\030\001 \001(\t\"\316\004\n\021MultichainMessa"
  "ge\022\n\n\002id\030\001 \001(\t\022=\n\022get_status_request\030\002 \001"
  "(\0132\037.multichain.v1.GetStatusRequestH\000\022_\n"
  "$gen_prepare_multichain_proof_request\030\003 "
  "\001(\0132/.multichain.v1.GenPrepareMultichain"
  "ProofRequestH\000\022e\n\'gen_aggregated_multich"
  "ain_proof_request\030\004 \001(\01322.multichain.v1."
  "GenAggregatedMultichainProofRequestH\000\022[\n"
  "\"gen_final_multichain_proof_request\030\005 \001("
  "\0132-.multichain.v1.GenFinalMultichainProo"
  "fRequestH\000\0226\n\016cancel_request\030\006 \001(\0132\034.mul"
  "tichain.v1.CancelRequestH\000\022;\n\021get_proof_"
  "request\030\007 \001(\0132\036.multichain.v1.GetProofRe"
  "questH\000\022I\n\030calculate_sha256_request\030\010 \001("
  "\0132%.multichain.v1.CalculateSha256Request"
  "H\000B\t\n\007request\"\331\004\n\rProverMessage\022\n\n\002id\030\001 "
  "\001(\t\022\?\n\023get_status_response\030\002 \001(\0132 .multi"
  "chain.v1.GetStatusResponseH\000\022a\n%gen_prep"
  "are_multichain_proof_response\030\003 \001(\01320.mu"
  "ltichain.v1.GenPrepareMultichainProofRes"
  "ponseH\000\022g\n(gen_aggregated_multichain_pro"
  "of_response\030\004 \001(\01323.multichain.v1.GenAgg"
  "regatedMultichainProofResponseH\000\022]\n#gen_"
  "final_multichain_proof_response\030\005 \001(\0132.."
  "multichain.v1.GenFinalMultichainProofRes"
  "ponseH\000\0228\n\017cancel_response\030\006 \001(\0132\035.multi"
  "chain.v1.CancelResponseH\000\022=\n\022get_proof_r"
  "esponse\030\007 \001(\0132\037.multichain.v1.GetProofRe"
  "sponseH\000\022K\n\031calculate_sha256_response\030\010 "
  "\001(\0132&.multichain.v1.CalculateSha256Respo"
  "nseH\000B\n\n\010response\"\022\n\020GetStatusRequest\"R\n"
  " GenPrepareMultichainProofRequest\022\027\n\017rec"
  "ursive_proof\030\001 \001(\t\022\025\n\rprevious_hash\030\002 \001("
  "\t\"]\n#GenAggregatedMultichainProofRequest"
  "\022\032\n\022multichain_proof_1\030\001 \001(\t\022\032\n\022multicha"
  "in_proof_2\030\002 \001(\t\"S\n\036GenFinalMultichainPr"
  "oofRequest\022\030\n\020multichain_proof\030\001 \001(\t\022\027\n\017"
  "aggregator_addr\030\002 \001(\t\"\033\n\rCancelRequest\022\n"
  "\n\002id\030\001 \001(\t\".\n\017GetProofRequest\022\n\n\002id\030\001 \001("
  "\t\022\017\n\007timeout\030\002 \001(\004\"@\n\026CalculateSha256Req"
  "uest\022\017\n\007publics\030\001 \001(\t\022\025\n\rprevious_hash\030\002"
  " \001(\t\"\227\004\n\021GetStatusResponse\0227\n\006status\030\001 \001"
  "(\0162\'.multichain.v1.GetStatusResponse.Sta"
  "tus\022 \n\030last_computed_request_id\030\002 \001(\t\022\036\n"
  "\026last_computed_end_time\030\003 \001(\004\022$\n\034current"
  "_computing_request_id\030\004 \001(\t\022$\n\034current_c"
  "omputing_start_time\030\005 \001(\004\022\025\n\rversion_pro"
  "to\030\006 \001(\t\022\026\n\016version_server\030\007 \001(\t\022!\n\031pend"
  "ing_request_queue_ids\030\010 \003(\t\022\023\n\013prover_na"
  "me\030\t \001(\t\022\021\n\tprover_id\030\n \001(\t\022\027\n\017number_of"
  "_cores\030\013 \001(\004\022\024\n\014total_memory\030\014 \001(\004\022\023\n\013fr"
  "ee_memory\030\r \001(\004\022\017\n\007fork_id\030\016 \001(\004\"l\n\006Stat"
  "us\022\026\n\022STATUS_UNSPECIFIED\020\000\022\022\n\016STATUS_BOO"
  "TING\020\001\022\024\n\020STATUS_COMPUTING\020\002\022\017\n\013STATUS_I"
  "DLE\020\003\022\017\n\013STATUS_HALT\020\004\"V\n!GenPrepareMult"
  "ichainProofResponse\022\n\n\002id\030\001 \001(\t\022%\n\006resul"
  "t\030\002 \001(\0162\025.multichain.v1.Result\"Y\n$GenAgg"
  "regatedMultichainProofResponse\022\n\n\002id\030\001 \001"
  "(\t\022%\n\006result\030\002 \001(\0162\025.multichain.v1.Resul"
  "t\"T\n\037GenFinalMultichainProofResponse\022\n\n\002"
  "id\030\001 \001(\t\022%\n\006result\030\002 \001(\0162\025.multichain.v1"
  ".Result\"7\n\016CancelResponse\022%\n\006result\030\001 \001("
  "\0162\025.multichain.v1.Result\"\364\002\n\020GetProofRes"
  "ponse\022\n\n\002id\030\001 \001(\t\0224\n\rprepare_proof\030\002 \001(\013"
  "2\033.multichain.v1.PrepareProofH\000\022\032\n\020multi"
  "chain_proof\030\003 \001(\tH\000\0226\n\006result\030\004 \001(\0162&.mu"
  "ltichain.v1.GetProofResponse.Result\022\025\n\rr"
  "esult_string\030\005 \001(\t\"\251\001\n\006Result\022\026\n\022RESULT_"
  "UNSPECIFIED\020\000\022\027\n\023RESULT_COMPLETED_OK\020\001\022\020"
  "\n\014RESULT_ERROR\020\002\022\032\n\026RESULT_COMPLETED_ERR"
  "OR\020\003\022\022\n\016RESULT_PENDING\020\004\022\031\n\025RESULT_INTER"
  "NAL_ERROR\020\005\022\021\n\rRESULT_CANCEL\020\006B\007\n\005proof\""
  "0\n\014PrepareProof\022\r\n\005proof\030\001 \001(\t\022\021\n\thash_i"
  "nfo\030\002 \001(\t\"+\n\027CalculateSha256Response\022\020\n\010"
  "out_hash\030\001 \001(\t*\\\n\006Result\022\026\n\022RESULT_UNSPE"
  "CIFIED\020\000\022\r\n\tRESULT_OK\020\001\022\020\n\014RESULT_ERROR\020"
  "\002\022\031\n\025RESULT_INTERNAL_ERROR\020\0032d\n\021Multicha"
  "inService\022O\n\007Channel\022\034.multichain.v1.Pro"
  "verMessage\032 .multichain.v1.MultichainMes"
  "sage\"\000(\0010\001B7Z5github.com/0xPolygonHermez"
  "/zkevm-node/proverclient/pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_multichain_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_multichain_2eproto_sccs[18] = {
  &scc_info_CalculateSha256Request_multichain_2eproto.base,
  &scc_info_CalculateSha256Response_multichain_2eproto.base,
  &scc_info_CancelRequest_multichain_2eproto.base,
  &scc_info_CancelResponse_multichain_2eproto.base,
  &scc_info_GenAggregatedMultichainProofRequest_multichain_2eproto.base,
  &scc_info_GenAggregatedMultichainProofResponse_multichain_2eproto.base,
  &scc_info_GenFinalMultichainProofRequest_multichain_2eproto.base,
  &scc_info_GenFinalMultichainProofResponse_multichain_2eproto.base,
  &scc_info_GenPrepareMultichainProofRequest_multichain_2eproto.base,
  &scc_info_GenPrepareMultichainProofResponse_multichain_2eproto.base,
  &scc_info_GetProofRequest_multichain_2eproto.base,
  &scc_info_GetProofResponse_multichain_2eproto.base,
  &scc_info_GetStatusRequest_multichain_2eproto.base,
  &scc_info_GetStatusResponse_multichain_2eproto.base,
  &scc_info_MultichainMessage_multichain_2eproto.base,
  &scc_info_PrepareProof_multichain_2eproto.base,
  &scc_info_ProverMessage_multichain_2eproto.base,
  &scc_info_Version_multichain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_multichain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_multichain_2eproto = {
  false, false, descriptor_table_protodef_multichain_2eproto, "multichain.proto", 3275,
  &descriptor_table_multichain_2eproto_once, descriptor_table_multichain_2eproto_sccs, descriptor_table_multichain_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_multichain_2eproto::offsets,
  file_level_metadata_multichain_2eproto, 18, file_level_enum_descriptors_multichain_2eproto, file_level_service_descriptors_multichain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_multichain_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_multichain_2eproto)), true);
namespace multichain {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetStatusResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_multichain_2eproto);
  return file_level_enum_descriptors_multichain_2eproto[0];
}
bool GetStatusResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_UNSPECIFIED;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_BOOTING;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_COMPUTING;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_IDLE;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_HALT;
constexpr GetStatusResponse_Status GetStatusResponse::Status_MIN;
constexpr GetStatusResponse_Status GetStatusResponse::Status_MAX;
constexpr int GetStatusResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetProofResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_multichain_2eproto);
  return file_level_enum_descriptors_multichain_2eproto[1];
}
bool GetProofResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetProofResponse_Result GetProofResponse::RESULT_UNSPECIFIED;
constexpr GetProofResponse_Result GetProofResponse::RESULT_COMPLETED_OK;
constexpr GetProofResponse_Result GetProofResponse::RESULT_ERROR;
constexpr GetProofResponse_Result GetProofResponse::RESULT_COMPLETED_ERROR;
constexpr GetProofResponse_Result GetProofResponse::RESULT_PENDING;
constexpr GetProofResponse_Result GetProofResponse::RESULT_INTERNAL_ERROR;
constexpr GetProofResponse_Result GetProofResponse::RESULT_CANCEL;
constexpr GetProofResponse_Result GetProofResponse::Result_MIN;
constexpr GetProofResponse_Result GetProofResponse::Result_MAX;
constexpr int GetProofResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_multichain_2eproto);
  return file_level_enum_descriptors_multichain_2eproto[2];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v0_0_1().empty()) {
    v0_0_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v0_0_1(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.Version)
}

void Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Version_multichain_2eproto.base);
  v0_0_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:multichain.v1.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v0_0_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_multichain_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v0_0_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string v0_0_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v0_0_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.Version.v0_0_1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v0_0_1().data(), static_cast<int>(this->_internal_v0_0_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.Version.v0_0_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v0_0_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (this->v0_0_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v0_0_1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0_0_1().size() > 0) {
    _internal_set_v0_0_1(from._internal_v0_0_1());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v0_0_1_.Swap(&other->v0_0_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultichainMessage::InitAsDefaultInstance() {
  ::multichain::v1::_MultichainMessage_default_instance_.get_status_request_ = const_cast< ::multichain::v1::GetStatusRequest*>(
      ::multichain::v1::GetStatusRequest::internal_default_instance());
  ::multichain::v1::_MultichainMessage_default_instance_.gen_prepare_multichain_proof_request_ = const_cast< ::multichain::v1::GenPrepareMultichainProofRequest*>(
      ::multichain::v1::GenPrepareMultichainProofRequest::internal_default_instance());
  ::multichain::v1::_MultichainMessage_default_instance_.gen_aggregated_multichain_proof_request_ = const_cast< ::multichain::v1::GenAggregatedMultichainProofRequest*>(
      ::multichain::v1::GenAggregatedMultichainProofRequest::internal_default_instance());
  ::multichain::v1::_MultichainMessage_default_instance_.gen_final_multichain_proof_request_ = const_cast< ::multichain::v1::GenFinalMultichainProofRequest*>(
      ::multichain::v1::GenFinalMultichainProofRequest::internal_default_instance());
  ::multichain::v1::_MultichainMessage_default_instance_.cancel_request_ = const_cast< ::multichain::v1::CancelRequest*>(
      ::multichain::v1::CancelRequest::internal_default_instance());
  ::multichain::v1::_MultichainMessage_default_instance_.get_proof_request_ = const_cast< ::multichain::v1::GetProofRequest*>(
      ::multichain::v1::GetProofRequest::internal_default_instance());
  ::multichain::v1::_MultichainMessage_default_instance_.calculate_sha256_request_ = const_cast< ::multichain::v1::CalculateSha256Request*>(
      ::multichain::v1::CalculateSha256Request::internal_default_instance());
}
class MultichainMessage::_Internal {
 public:
  static const ::multichain::v1::GetStatusRequest& get_status_request(const MultichainMessage* msg);
  static const ::multichain::v1::GenPrepareMultichainProofRequest& gen_prepare_multichain_proof_request(const MultichainMessage* msg);
  static const ::multichain::v1::GenAggregatedMultichainProofRequest& gen_aggregated_multichain_proof_request(const MultichainMessage* msg);
  static const ::multichain::v1::GenFinalMultichainProofRequest& gen_final_multichain_proof_request(const MultichainMessage* msg);
  static const ::multichain::v1::CancelRequest& cancel_request(const MultichainMessage* msg);
  static const ::multichain::v1::GetProofRequest& get_proof_request(const MultichainMessage* msg);
  static const ::multichain::v1::CalculateSha256Request& calculate_sha256_request(const MultichainMessage* msg);
};

const ::multichain::v1::GetStatusRequest&
MultichainMessage::_Internal::get_status_request(const MultichainMessage* msg) {
  return *msg->request_.get_status_request_;
}
const ::multichain::v1::GenPrepareMultichainProofRequest&
MultichainMessage::_Internal::gen_prepare_multichain_proof_request(const MultichainMessage* msg) {
  return *msg->request_.gen_prepare_multichain_proof_request_;
}
const ::multichain::v1::GenAggregatedMultichainProofRequest&
MultichainMessage::_Internal::gen_aggregated_multichain_proof_request(const MultichainMessage* msg) {
  return *msg->request_.gen_aggregated_multichain_proof_request_;
}
const ::multichain::v1::GenFinalMultichainProofRequest&
MultichainMessage::_Internal::gen_final_multichain_proof_request(const MultichainMessage* msg) {
  return *msg->request_.gen_final_multichain_proof_request_;
}
const ::multichain::v1::CancelRequest&
MultichainMessage::_Internal::cancel_request(const MultichainMessage* msg) {
  return *msg->request_.cancel_request_;
}
const ::multichain::v1::GetProofRequest&
MultichainMessage::_Internal::get_proof_request(const MultichainMessage* msg) {
  return *msg->request_.get_proof_request_;
}
const ::multichain::v1::CalculateSha256Request&
MultichainMessage::_Internal::calculate_sha256_request(const MultichainMessage* msg) {
  return *msg->request_.calculate_sha256_request_;
}
void MultichainMessage::set_allocated_get_status_request(::multichain::v1::GetStatusRequest* get_status_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_status_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_status_request);
    if (message_arena != submessage_arena) {
      get_status_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_status_request, submessage_arena);
    }
    set_has_get_status_request();
    request_.get_status_request_ = get_status_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.get_status_request)
}
void MultichainMessage::set_allocated_gen_prepare_multichain_proof_request(::multichain::v1::GenPrepareMultichainProofRequest* gen_prepare_multichain_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (gen_prepare_multichain_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gen_prepare_multichain_proof_request);
    if (message_arena != submessage_arena) {
      gen_prepare_multichain_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_prepare_multichain_proof_request, submessage_arena);
    }
    set_has_gen_prepare_multichain_proof_request();
    request_.gen_prepare_multichain_proof_request_ = gen_prepare_multichain_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.gen_prepare_multichain_proof_request)
}
void MultichainMessage::set_allocated_gen_aggregated_multichain_proof_request(::multichain::v1::GenAggregatedMultichainProofRequest* gen_aggregated_multichain_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (gen_aggregated_multichain_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gen_aggregated_multichain_proof_request);
    if (message_arena != submessage_arena) {
      gen_aggregated_multichain_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_aggregated_multichain_proof_request, submessage_arena);
    }
    set_has_gen_aggregated_multichain_proof_request();
    request_.gen_aggregated_multichain_proof_request_ = gen_aggregated_multichain_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.gen_aggregated_multichain_proof_request)
}
void MultichainMessage::set_allocated_gen_final_multichain_proof_request(::multichain::v1::GenFinalMultichainProofRequest* gen_final_multichain_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (gen_final_multichain_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gen_final_multichain_proof_request);
    if (message_arena != submessage_arena) {
      gen_final_multichain_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_final_multichain_proof_request, submessage_arena);
    }
    set_has_gen_final_multichain_proof_request();
    request_.gen_final_multichain_proof_request_ = gen_final_multichain_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.gen_final_multichain_proof_request)
}
void MultichainMessage::set_allocated_cancel_request(::multichain::v1::CancelRequest* cancel_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (cancel_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_request);
    if (message_arena != submessage_arena) {
      cancel_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_request, submessage_arena);
    }
    set_has_cancel_request();
    request_.cancel_request_ = cancel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.cancel_request)
}
void MultichainMessage::set_allocated_get_proof_request(::multichain::v1::GetProofRequest* get_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_proof_request);
    if (message_arena != submessage_arena) {
      get_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_proof_request, submessage_arena);
    }
    set_has_get_proof_request();
    request_.get_proof_request_ = get_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.get_proof_request)
}
void MultichainMessage::set_allocated_calculate_sha256_request(::multichain::v1::CalculateSha256Request* calculate_sha256_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (calculate_sha256_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(calculate_sha256_request);
    if (message_arena != submessage_arena) {
      calculate_sha256_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calculate_sha256_request, submessage_arena);
    }
    set_has_calculate_sha256_request();
    request_.calculate_sha256_request_ = calculate_sha256_request;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.MultichainMessage.calculate_sha256_request)
}
MultichainMessage::MultichainMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.MultichainMessage)
}
MultichainMessage::MultichainMessage(const MultichainMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  clear_has_request();
  switch (from.request_case()) {
    case kGetStatusRequest: {
      _internal_mutable_get_status_request()->::multichain::v1::GetStatusRequest::MergeFrom(from._internal_get_status_request());
      break;
    }
    case kGenPrepareMultichainProofRequest: {
      _internal_mutable_gen_prepare_multichain_proof_request()->::multichain::v1::GenPrepareMultichainProofRequest::MergeFrom(from._internal_gen_prepare_multichain_proof_request());
      break;
    }
    case kGenAggregatedMultichainProofRequest: {
      _internal_mutable_gen_aggregated_multichain_proof_request()->::multichain::v1::GenAggregatedMultichainProofRequest::MergeFrom(from._internal_gen_aggregated_multichain_proof_request());
      break;
    }
    case kGenFinalMultichainProofRequest: {
      _internal_mutable_gen_final_multichain_proof_request()->::multichain::v1::GenFinalMultichainProofRequest::MergeFrom(from._internal_gen_final_multichain_proof_request());
      break;
    }
    case kCancelRequest: {
      _internal_mutable_cancel_request()->::multichain::v1::CancelRequest::MergeFrom(from._internal_cancel_request());
      break;
    }
    case kGetProofRequest: {
      _internal_mutable_get_proof_request()->::multichain::v1::GetProofRequest::MergeFrom(from._internal_get_proof_request());
      break;
    }
    case kCalculateSha256Request: {
      _internal_mutable_calculate_sha256_request()->::multichain::v1::CalculateSha256Request::MergeFrom(from._internal_calculate_sha256_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.MultichainMessage)
}

void MultichainMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultichainMessage_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_request();
}

MultichainMessage::~MultichainMessage() {
  // @@protoc_insertion_point(destructor:multichain.v1.MultichainMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultichainMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_request()) {
    clear_request();
  }
}

void MultichainMessage::ArenaDtor(void* object) {
  MultichainMessage* _this = reinterpret_cast< MultichainMessage* >(object);
  (void)_this;
}
void MultichainMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultichainMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultichainMessage& MultichainMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultichainMessage_multichain_2eproto.base);
  return *internal_default_instance();
}


void MultichainMessage::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:multichain.v1.MultichainMessage)
  switch (request_case()) {
    case kGetStatusRequest: {
      if (GetArena() == nullptr) {
        delete request_.get_status_request_;
      }
      break;
    }
    case kGenPrepareMultichainProofRequest: {
      if (GetArena() == nullptr) {
        delete request_.gen_prepare_multichain_proof_request_;
      }
      break;
    }
    case kGenAggregatedMultichainProofRequest: {
      if (GetArena() == nullptr) {
        delete request_.gen_aggregated_multichain_proof_request_;
      }
      break;
    }
    case kGenFinalMultichainProofRequest: {
      if (GetArena() == nullptr) {
        delete request_.gen_final_multichain_proof_request_;
      }
      break;
    }
    case kCancelRequest: {
      if (GetArena() == nullptr) {
        delete request_.cancel_request_;
      }
      break;
    }
    case kGetProofRequest: {
      if (GetArena() == nullptr) {
        delete request_.get_proof_request_;
      }
      break;
    }
    case kCalculateSha256Request: {
      if (GetArena() == nullptr) {
        delete request_.calculate_sha256_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void MultichainMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.MultichainMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultichainMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.MultichainMessage.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GetStatusRequest get_status_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_status_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GenPrepareMultichainProofRequest gen_prepare_multichain_proof_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_prepare_multichain_proof_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GenAggregatedMultichainProofRequest gen_aggregated_multichain_proof_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_aggregated_multichain_proof_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GenFinalMultichainProofRequest gen_final_multichain_proof_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_final_multichain_proof_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.CancelRequest cancel_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GetProofRequest get_proof_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_proof_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.CalculateSha256Request calculate_sha256_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_calculate_sha256_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultichainMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.MultichainMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.MultichainMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .multichain.v1.GetStatusRequest get_status_request = 2;
  if (_internal_has_get_status_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_status_request(this), target, stream);
  }

  // .multichain.v1.GenPrepareMultichainProofRequest gen_prepare_multichain_proof_request = 3;
  if (_internal_has_gen_prepare_multichain_proof_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gen_prepare_multichain_proof_request(this), target, stream);
  }

  // .multichain.v1.GenAggregatedMultichainProofRequest gen_aggregated_multichain_proof_request = 4;
  if (_internal_has_gen_aggregated_multichain_proof_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gen_aggregated_multichain_proof_request(this), target, stream);
  }

  // .multichain.v1.GenFinalMultichainProofRequest gen_final_multichain_proof_request = 5;
  if (_internal_has_gen_final_multichain_proof_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gen_final_multichain_proof_request(this), target, stream);
  }

  // .multichain.v1.CancelRequest cancel_request = 6;
  if (_internal_has_cancel_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cancel_request(this), target, stream);
  }

  // .multichain.v1.GetProofRequest get_proof_request = 7;
  if (_internal_has_get_proof_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::get_proof_request(this), target, stream);
  }

  // .multichain.v1.CalculateSha256Request calculate_sha256_request = 8;
  if (_internal_has_calculate_sha256_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::calculate_sha256_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.MultichainMessage)
  return target;
}

size_t MultichainMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.MultichainMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (request_case()) {
    // .multichain.v1.GetStatusRequest get_status_request = 2;
    case kGetStatusRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_status_request_);
      break;
    }
    // .multichain.v1.GenPrepareMultichainProofRequest gen_prepare_multichain_proof_request = 3;
    case kGenPrepareMultichainProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.gen_prepare_multichain_proof_request_);
      break;
    }
    // .multichain.v1.GenAggregatedMultichainProofRequest gen_aggregated_multichain_proof_request = 4;
    case kGenAggregatedMultichainProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.gen_aggregated_multichain_proof_request_);
      break;
    }
    // .multichain.v1.GenFinalMultichainProofRequest gen_final_multichain_proof_request = 5;
    case kGenFinalMultichainProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.gen_final_multichain_proof_request_);
      break;
    }
    // .multichain.v1.CancelRequest cancel_request = 6;
    case kCancelRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.cancel_request_);
      break;
    }
    // .multichain.v1.GetProofRequest get_proof_request = 7;
    case kGetProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_proof_request_);
      break;
    }
    // .multichain.v1.CalculateSha256Request calculate_sha256_request = 8;
    case kCalculateSha256Request: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.calculate_sha256_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultichainMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.MultichainMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MultichainMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultichainMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.MultichainMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.MultichainMessage)
    MergeFrom(*source);
  }
}

void MultichainMessage::MergeFrom(const MultichainMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.MultichainMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.request_case()) {
    case kGetStatusRequest: {
      _internal_mutable_get_status_request()->::multichain::v1::GetStatusRequest::MergeFrom(from._internal_get_status_request());
      break;
    }
    case kGenPrepareMultichainProofRequest: {
      _internal_mutable_gen_prepare_multichain_proof_request()->::multichain::v1::GenPrepareMultichainProofRequest::MergeFrom(from._internal_gen_prepare_multichain_proof_request());
      break;
    }
    case kGenAggregatedMultichainProofRequest: {
      _internal_mutable_gen_aggregated_multichain_proof_request()->::multichain::v1::GenAggregatedMultichainProofRequest::MergeFrom(from._internal_gen_aggregated_multichain_proof_request());
      break;
    }
    case kGenFinalMultichainProofRequest: {
      _internal_mutable_gen_final_multichain_proof_request()->::multichain::v1::GenFinalMultichainProofRequest::MergeFrom(from._internal_gen_final_multichain_proof_request());
      break;
    }
    case kCancelRequest: {
      _internal_mutable_cancel_request()->::multichain::v1::CancelRequest::MergeFrom(from._internal_cancel_request());
      break;
    }
    case kGetProofRequest: {
      _internal_mutable_get_proof_request()->::multichain::v1::GetProofRequest::MergeFrom(from._internal_get_proof_request());
      break;
    }
    case kCalculateSha256Request: {
      _internal_mutable_calculate_sha256_request()->::multichain::v1::CalculateSha256Request::MergeFrom(from._internal_calculate_sha256_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void MultichainMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.MultichainMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultichainMessage::CopyFrom(const MultichainMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.MultichainMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultichainMessage::IsInitialized() const {
  return true;
}

void MultichainMessage::InternalSwap(MultichainMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultichainMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProverMessage::InitAsDefaultInstance() {
  ::multichain::v1::_ProverMessage_default_instance_.get_status_response_ = const_cast< ::multichain::v1::GetStatusResponse*>(
      ::multichain::v1::GetStatusResponse::internal_default_instance());
  ::multichain::v1::_ProverMessage_default_instance_.gen_prepare_multichain_proof_response_ = const_cast< ::multichain::v1::GenPrepareMultichainProofResponse*>(
      ::multichain::v1::GenPrepareMultichainProofResponse::internal_default_instance());
  ::multichain::v1::_ProverMessage_default_instance_.gen_aggregated_multichain_proof_response_ = const_cast< ::multichain::v1::GenAggregatedMultichainProofResponse*>(
      ::multichain::v1::GenAggregatedMultichainProofResponse::internal_default_instance());
  ::multichain::v1::_ProverMessage_default_instance_.gen_final_multichain_proof_response_ = const_cast< ::multichain::v1::GenFinalMultichainProofResponse*>(
      ::multichain::v1::GenFinalMultichainProofResponse::internal_default_instance());
  ::multichain::v1::_ProverMessage_default_instance_.cancel_response_ = const_cast< ::multichain::v1::CancelResponse*>(
      ::multichain::v1::CancelResponse::internal_default_instance());
  ::multichain::v1::_ProverMessage_default_instance_.get_proof_response_ = const_cast< ::multichain::v1::GetProofResponse*>(
      ::multichain::v1::GetProofResponse::internal_default_instance());
  ::multichain::v1::_ProverMessage_default_instance_.calculate_sha256_response_ = const_cast< ::multichain::v1::CalculateSha256Response*>(
      ::multichain::v1::CalculateSha256Response::internal_default_instance());
}
class ProverMessage::_Internal {
 public:
  static const ::multichain::v1::GetStatusResponse& get_status_response(const ProverMessage* msg);
  static const ::multichain::v1::GenPrepareMultichainProofResponse& gen_prepare_multichain_proof_response(const ProverMessage* msg);
  static const ::multichain::v1::GenAggregatedMultichainProofResponse& gen_aggregated_multichain_proof_response(const ProverMessage* msg);
  static const ::multichain::v1::GenFinalMultichainProofResponse& gen_final_multichain_proof_response(const ProverMessage* msg);
  static const ::multichain::v1::CancelResponse& cancel_response(const ProverMessage* msg);
  static const ::multichain::v1::GetProofResponse& get_proof_response(const ProverMessage* msg);
  static const ::multichain::v1::CalculateSha256Response& calculate_sha256_response(const ProverMessage* msg);
};

const ::multichain::v1::GetStatusResponse&
ProverMessage::_Internal::get_status_response(const ProverMessage* msg) {
  return *msg->response_.get_status_response_;
}
const ::multichain::v1::GenPrepareMultichainProofResponse&
ProverMessage::_Internal::gen_prepare_multichain_proof_response(const ProverMessage* msg) {
  return *msg->response_.gen_prepare_multichain_proof_response_;
}
const ::multichain::v1::GenAggregatedMultichainProofResponse&
ProverMessage::_Internal::gen_aggregated_multichain_proof_response(const ProverMessage* msg) {
  return *msg->response_.gen_aggregated_multichain_proof_response_;
}
const ::multichain::v1::GenFinalMultichainProofResponse&
ProverMessage::_Internal::gen_final_multichain_proof_response(const ProverMessage* msg) {
  return *msg->response_.gen_final_multichain_proof_response_;
}
const ::multichain::v1::CancelResponse&
ProverMessage::_Internal::cancel_response(const ProverMessage* msg) {
  return *msg->response_.cancel_response_;
}
const ::multichain::v1::GetProofResponse&
ProverMessage::_Internal::get_proof_response(const ProverMessage* msg) {
  return *msg->response_.get_proof_response_;
}
const ::multichain::v1::CalculateSha256Response&
ProverMessage::_Internal::calculate_sha256_response(const ProverMessage* msg) {
  return *msg->response_.calculate_sha256_response_;
}
void ProverMessage::set_allocated_get_status_response(::multichain::v1::GetStatusResponse* get_status_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_status_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_status_response);
    if (message_arena != submessage_arena) {
      get_status_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_status_response, submessage_arena);
    }
    set_has_get_status_response();
    response_.get_status_response_ = get_status_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.get_status_response)
}
void ProverMessage::set_allocated_gen_prepare_multichain_proof_response(::multichain::v1::GenPrepareMultichainProofResponse* gen_prepare_multichain_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (gen_prepare_multichain_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gen_prepare_multichain_proof_response);
    if (message_arena != submessage_arena) {
      gen_prepare_multichain_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_prepare_multichain_proof_response, submessage_arena);
    }
    set_has_gen_prepare_multichain_proof_response();
    response_.gen_prepare_multichain_proof_response_ = gen_prepare_multichain_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.gen_prepare_multichain_proof_response)
}
void ProverMessage::set_allocated_gen_aggregated_multichain_proof_response(::multichain::v1::GenAggregatedMultichainProofResponse* gen_aggregated_multichain_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (gen_aggregated_multichain_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gen_aggregated_multichain_proof_response);
    if (message_arena != submessage_arena) {
      gen_aggregated_multichain_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_aggregated_multichain_proof_response, submessage_arena);
    }
    set_has_gen_aggregated_multichain_proof_response();
    response_.gen_aggregated_multichain_proof_response_ = gen_aggregated_multichain_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.gen_aggregated_multichain_proof_response)
}
void ProverMessage::set_allocated_gen_final_multichain_proof_response(::multichain::v1::GenFinalMultichainProofResponse* gen_final_multichain_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (gen_final_multichain_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gen_final_multichain_proof_response);
    if (message_arena != submessage_arena) {
      gen_final_multichain_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_final_multichain_proof_response, submessage_arena);
    }
    set_has_gen_final_multichain_proof_response();
    response_.gen_final_multichain_proof_response_ = gen_final_multichain_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.gen_final_multichain_proof_response)
}
void ProverMessage::set_allocated_cancel_response(::multichain::v1::CancelResponse* cancel_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (cancel_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_response);
    if (message_arena != submessage_arena) {
      cancel_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_response, submessage_arena);
    }
    set_has_cancel_response();
    response_.cancel_response_ = cancel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.cancel_response)
}
void ProverMessage::set_allocated_get_proof_response(::multichain::v1::GetProofResponse* get_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_proof_response);
    if (message_arena != submessage_arena) {
      get_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_proof_response, submessage_arena);
    }
    set_has_get_proof_response();
    response_.get_proof_response_ = get_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.get_proof_response)
}
void ProverMessage::set_allocated_calculate_sha256_response(::multichain::v1::CalculateSha256Response* calculate_sha256_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (calculate_sha256_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(calculate_sha256_response);
    if (message_arena != submessage_arena) {
      calculate_sha256_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calculate_sha256_response, submessage_arena);
    }
    set_has_calculate_sha256_response();
    response_.calculate_sha256_response_ = calculate_sha256_response;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.ProverMessage.calculate_sha256_response)
}
ProverMessage::ProverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.ProverMessage)
}
ProverMessage::ProverMessage(const ProverMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  clear_has_response();
  switch (from.response_case()) {
    case kGetStatusResponse: {
      _internal_mutable_get_status_response()->::multichain::v1::GetStatusResponse::MergeFrom(from._internal_get_status_response());
      break;
    }
    case kGenPrepareMultichainProofResponse: {
      _internal_mutable_gen_prepare_multichain_proof_response()->::multichain::v1::GenPrepareMultichainProofResponse::MergeFrom(from._internal_gen_prepare_multichain_proof_response());
      break;
    }
    case kGenAggregatedMultichainProofResponse: {
      _internal_mutable_gen_aggregated_multichain_proof_response()->::multichain::v1::GenAggregatedMultichainProofResponse::MergeFrom(from._internal_gen_aggregated_multichain_proof_response());
      break;
    }
    case kGenFinalMultichainProofResponse: {
      _internal_mutable_gen_final_multichain_proof_response()->::multichain::v1::GenFinalMultichainProofResponse::MergeFrom(from._internal_gen_final_multichain_proof_response());
      break;
    }
    case kCancelResponse: {
      _internal_mutable_cancel_response()->::multichain::v1::CancelResponse::MergeFrom(from._internal_cancel_response());
      break;
    }
    case kGetProofResponse: {
      _internal_mutable_get_proof_response()->::multichain::v1::GetProofResponse::MergeFrom(from._internal_get_proof_response());
      break;
    }
    case kCalculateSha256Response: {
      _internal_mutable_calculate_sha256_response()->::multichain::v1::CalculateSha256Response::MergeFrom(from._internal_calculate_sha256_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.ProverMessage)
}

void ProverMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProverMessage_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}

ProverMessage::~ProverMessage() {
  // @@protoc_insertion_point(destructor:multichain.v1.ProverMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProverMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_response()) {
    clear_response();
  }
}

void ProverMessage::ArenaDtor(void* object) {
  ProverMessage* _this = reinterpret_cast< ProverMessage* >(object);
  (void)_this;
}
void ProverMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProverMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProverMessage& ProverMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProverMessage_multichain_2eproto.base);
  return *internal_default_instance();
}


void ProverMessage::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:multichain.v1.ProverMessage)
  switch (response_case()) {
    case kGetStatusResponse: {
      if (GetArena() == nullptr) {
        delete response_.get_status_response_;
      }
      break;
    }
    case kGenPrepareMultichainProofResponse: {
      if (GetArena() == nullptr) {
        delete response_.gen_prepare_multichain_proof_response_;
      }
      break;
    }
    case kGenAggregatedMultichainProofResponse: {
      if (GetArena() == nullptr) {
        delete response_.gen_aggregated_multichain_proof_response_;
      }
      break;
    }
    case kGenFinalMultichainProofResponse: {
      if (GetArena() == nullptr) {
        delete response_.gen_final_multichain_proof_response_;
      }
      break;
    }
    case kCancelResponse: {
      if (GetArena() == nullptr) {
        delete response_.cancel_response_;
      }
      break;
    }
    case kGetProofResponse: {
      if (GetArena() == nullptr) {
        delete response_.get_proof_response_;
      }
      break;
    }
    case kCalculateSha256Response: {
      if (GetArena() == nullptr) {
        delete response_.calculate_sha256_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ProverMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.ProverMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProverMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.ProverMessage.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GetStatusResponse get_status_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_status_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GenPrepareMultichainProofResponse gen_prepare_multichain_proof_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_prepare_multichain_proof_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GenAggregatedMultichainProofResponse gen_aggregated_multichain_proof_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_aggregated_multichain_proof_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GenFinalMultichainProofResponse gen_final_multichain_proof_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_final_multichain_proof_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.CancelResponse cancel_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GetProofResponse get_proof_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_proof_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.CalculateSha256Response calculate_sha256_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_calculate_sha256_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProverMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.ProverMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.ProverMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .multichain.v1.GetStatusResponse get_status_response = 2;
  if (_internal_has_get_status_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_status_response(this), target, stream);
  }

  // .multichain.v1.GenPrepareMultichainProofResponse gen_prepare_multichain_proof_response = 3;
  if (_internal_has_gen_prepare_multichain_proof_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gen_prepare_multichain_proof_response(this), target, stream);
  }

  // .multichain.v1.GenAggregatedMultichainProofResponse gen_aggregated_multichain_proof_response = 4;
  if (_internal_has_gen_aggregated_multichain_proof_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gen_aggregated_multichain_proof_response(this), target, stream);
  }

  // .multichain.v1.GenFinalMultichainProofResponse gen_final_multichain_proof_response = 5;
  if (_internal_has_gen_final_multichain_proof_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gen_final_multichain_proof_response(this), target, stream);
  }

  // .multichain.v1.CancelResponse cancel_response = 6;
  if (_internal_has_cancel_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cancel_response(this), target, stream);
  }

  // .multichain.v1.GetProofResponse get_proof_response = 7;
  if (_internal_has_get_proof_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::get_proof_response(this), target, stream);
  }

  // .multichain.v1.CalculateSha256Response calculate_sha256_response = 8;
  if (_internal_has_calculate_sha256_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::calculate_sha256_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.ProverMessage)
  return target;
}

size_t ProverMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.ProverMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (response_case()) {
    // .multichain.v1.GetStatusResponse get_status_response = 2;
    case kGetStatusResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_status_response_);
      break;
    }
    // .multichain.v1.GenPrepareMultichainProofResponse gen_prepare_multichain_proof_response = 3;
    case kGenPrepareMultichainProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.gen_prepare_multichain_proof_response_);
      break;
    }
    // .multichain.v1.GenAggregatedMultichainProofResponse gen_aggregated_multichain_proof_response = 4;
    case kGenAggregatedMultichainProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.gen_aggregated_multichain_proof_response_);
      break;
    }
    // .multichain.v1.GenFinalMultichainProofResponse gen_final_multichain_proof_response = 5;
    case kGenFinalMultichainProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.gen_final_multichain_proof_response_);
      break;
    }
    // .multichain.v1.CancelResponse cancel_response = 6;
    case kCancelResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.cancel_response_);
      break;
    }
    // .multichain.v1.GetProofResponse get_proof_response = 7;
    case kGetProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_proof_response_);
      break;
    }
    // .multichain.v1.CalculateSha256Response calculate_sha256_response = 8;
    case kCalculateSha256Response: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.calculate_sha256_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProverMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.ProverMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProverMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProverMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.ProverMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.ProverMessage)
    MergeFrom(*source);
  }
}

void ProverMessage::MergeFrom(const ProverMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.ProverMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.response_case()) {
    case kGetStatusResponse: {
      _internal_mutable_get_status_response()->::multichain::v1::GetStatusResponse::MergeFrom(from._internal_get_status_response());
      break;
    }
    case kGenPrepareMultichainProofResponse: {
      _internal_mutable_gen_prepare_multichain_proof_response()->::multichain::v1::GenPrepareMultichainProofResponse::MergeFrom(from._internal_gen_prepare_multichain_proof_response());
      break;
    }
    case kGenAggregatedMultichainProofResponse: {
      _internal_mutable_gen_aggregated_multichain_proof_response()->::multichain::v1::GenAggregatedMultichainProofResponse::MergeFrom(from._internal_gen_aggregated_multichain_proof_response());
      break;
    }
    case kGenFinalMultichainProofResponse: {
      _internal_mutable_gen_final_multichain_proof_response()->::multichain::v1::GenFinalMultichainProofResponse::MergeFrom(from._internal_gen_final_multichain_proof_response());
      break;
    }
    case kCancelResponse: {
      _internal_mutable_cancel_response()->::multichain::v1::CancelResponse::MergeFrom(from._internal_cancel_response());
      break;
    }
    case kGetProofResponse: {
      _internal_mutable_get_proof_response()->::multichain::v1::GetProofResponse::MergeFrom(from._internal_get_proof_response());
      break;
    }
    case kCalculateSha256Response: {
      _internal_mutable_calculate_sha256_response()->::multichain::v1::CalculateSha256Response::MergeFrom(from._internal_calculate_sha256_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ProverMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.ProverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProverMessage::CopyFrom(const ProverMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.ProverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProverMessage::IsInitialized() const {
  return true;
}

void ProverMessage::InternalSwap(ProverMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProverMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusRequest::InitAsDefaultInstance() {
}
class GetStatusRequest::_Internal {
 public:
};

GetStatusRequest::GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GetStatusRequest)
}

void GetStatusRequest::SharedCtor() {
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:multichain.v1.GetStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStatusRequest::ArenaDtor(void* object) {
  GetStatusRequest* _this = reinterpret_cast< GetStatusRequest* >(object);
  (void)_this;
}
void GetStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusRequest& GetStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusRequest_multichain_2eproto.base);
  return *internal_default_instance();
}


void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GetStatusRequest)
  return target;
}

size_t GetStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GetStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GetStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GetStatusRequest)
    MergeFrom(*source);
  }
}

void GetStatusRequest::MergeFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {
  return true;
}

void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenPrepareMultichainProofRequest::InitAsDefaultInstance() {
}
class GenPrepareMultichainProofRequest::_Internal {
 public:
};

GenPrepareMultichainProofRequest::GenPrepareMultichainProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GenPrepareMultichainProofRequest)
}
GenPrepareMultichainProofRequest::GenPrepareMultichainProofRequest(const GenPrepareMultichainProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recursive_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recursive_proof().empty()) {
    recursive_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recursive_proof(),
      GetArena());
  }
  previous_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_hash().empty()) {
    previous_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previous_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GenPrepareMultichainProofRequest)
}

void GenPrepareMultichainProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenPrepareMultichainProofRequest_multichain_2eproto.base);
  recursive_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenPrepareMultichainProofRequest::~GenPrepareMultichainProofRequest() {
  // @@protoc_insertion_point(destructor:multichain.v1.GenPrepareMultichainProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenPrepareMultichainProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recursive_proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenPrepareMultichainProofRequest::ArenaDtor(void* object) {
  GenPrepareMultichainProofRequest* _this = reinterpret_cast< GenPrepareMultichainProofRequest* >(object);
  (void)_this;
}
void GenPrepareMultichainProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenPrepareMultichainProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenPrepareMultichainProofRequest& GenPrepareMultichainProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenPrepareMultichainProofRequest_multichain_2eproto.base);
  return *internal_default_instance();
}


void GenPrepareMultichainProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GenPrepareMultichainProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recursive_proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenPrepareMultichainProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string recursive_proof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recursive_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenPrepareMultichainProofRequest.recursive_proof"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_previous_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenPrepareMultichainProofRequest.previous_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenPrepareMultichainProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GenPrepareMultichainProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string recursive_proof = 1;
  if (this->recursive_proof().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recursive_proof().data(), static_cast<int>(this->_internal_recursive_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenPrepareMultichainProofRequest.recursive_proof");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recursive_proof(), target);
  }

  // string previous_hash = 2;
  if (this->previous_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_hash().data(), static_cast<int>(this->_internal_previous_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenPrepareMultichainProofRequest.previous_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_previous_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GenPrepareMultichainProofRequest)
  return target;
}

size_t GenPrepareMultichainProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GenPrepareMultichainProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recursive_proof = 1;
  if (this->recursive_proof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recursive_proof());
  }

  // string previous_hash = 2;
  if (this->previous_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenPrepareMultichainProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GenPrepareMultichainProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenPrepareMultichainProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenPrepareMultichainProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GenPrepareMultichainProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GenPrepareMultichainProofRequest)
    MergeFrom(*source);
  }
}

void GenPrepareMultichainProofRequest::MergeFrom(const GenPrepareMultichainProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GenPrepareMultichainProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recursive_proof().size() > 0) {
    _internal_set_recursive_proof(from._internal_recursive_proof());
  }
  if (from.previous_hash().size() > 0) {
    _internal_set_previous_hash(from._internal_previous_hash());
  }
}

void GenPrepareMultichainProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GenPrepareMultichainProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenPrepareMultichainProofRequest::CopyFrom(const GenPrepareMultichainProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GenPrepareMultichainProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenPrepareMultichainProofRequest::IsInitialized() const {
  return true;
}

void GenPrepareMultichainProofRequest::InternalSwap(GenPrepareMultichainProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recursive_proof_.Swap(&other->recursive_proof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_hash_.Swap(&other->previous_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenPrepareMultichainProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenAggregatedMultichainProofRequest::InitAsDefaultInstance() {
}
class GenAggregatedMultichainProofRequest::_Internal {
 public:
};

GenAggregatedMultichainProofRequest::GenAggregatedMultichainProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GenAggregatedMultichainProofRequest)
}
GenAggregatedMultichainProofRequest::GenAggregatedMultichainProofRequest(const GenAggregatedMultichainProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multichain_proof_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multichain_proof_1().empty()) {
    multichain_proof_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multichain_proof_1(),
      GetArena());
  }
  multichain_proof_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multichain_proof_2().empty()) {
    multichain_proof_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multichain_proof_2(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GenAggregatedMultichainProofRequest)
}

void GenAggregatedMultichainProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenAggregatedMultichainProofRequest_multichain_2eproto.base);
  multichain_proof_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multichain_proof_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenAggregatedMultichainProofRequest::~GenAggregatedMultichainProofRequest() {
  // @@protoc_insertion_point(destructor:multichain.v1.GenAggregatedMultichainProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenAggregatedMultichainProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  multichain_proof_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multichain_proof_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenAggregatedMultichainProofRequest::ArenaDtor(void* object) {
  GenAggregatedMultichainProofRequest* _this = reinterpret_cast< GenAggregatedMultichainProofRequest* >(object);
  (void)_this;
}
void GenAggregatedMultichainProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenAggregatedMultichainProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenAggregatedMultichainProofRequest& GenAggregatedMultichainProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenAggregatedMultichainProofRequest_multichain_2eproto.base);
  return *internal_default_instance();
}


void GenAggregatedMultichainProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GenAggregatedMultichainProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multichain_proof_1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  multichain_proof_2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenAggregatedMultichainProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string multichain_proof_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_multichain_proof_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenAggregatedMultichainProofRequest.multichain_proof_1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multichain_proof_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_multichain_proof_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenAggregatedMultichainProofRequest.multichain_proof_2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenAggregatedMultichainProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GenAggregatedMultichainProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string multichain_proof_1 = 1;
  if (this->multichain_proof_1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multichain_proof_1().data(), static_cast<int>(this->_internal_multichain_proof_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenAggregatedMultichainProofRequest.multichain_proof_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_multichain_proof_1(), target);
  }

  // string multichain_proof_2 = 2;
  if (this->multichain_proof_2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multichain_proof_2().data(), static_cast<int>(this->_internal_multichain_proof_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenAggregatedMultichainProofRequest.multichain_proof_2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_multichain_proof_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GenAggregatedMultichainProofRequest)
  return target;
}

size_t GenAggregatedMultichainProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GenAggregatedMultichainProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string multichain_proof_1 = 1;
  if (this->multichain_proof_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multichain_proof_1());
  }

  // string multichain_proof_2 = 2;
  if (this->multichain_proof_2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multichain_proof_2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenAggregatedMultichainProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GenAggregatedMultichainProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenAggregatedMultichainProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenAggregatedMultichainProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GenAggregatedMultichainProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GenAggregatedMultichainProofRequest)
    MergeFrom(*source);
  }
}

void GenAggregatedMultichainProofRequest::MergeFrom(const GenAggregatedMultichainProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GenAggregatedMultichainProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.multichain_proof_1().size() > 0) {
    _internal_set_multichain_proof_1(from._internal_multichain_proof_1());
  }
  if (from.multichain_proof_2().size() > 0) {
    _internal_set_multichain_proof_2(from._internal_multichain_proof_2());
  }
}

void GenAggregatedMultichainProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GenAggregatedMultichainProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenAggregatedMultichainProofRequest::CopyFrom(const GenAggregatedMultichainProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GenAggregatedMultichainProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenAggregatedMultichainProofRequest::IsInitialized() const {
  return true;
}

void GenAggregatedMultichainProofRequest::InternalSwap(GenAggregatedMultichainProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multichain_proof_1_.Swap(&other->multichain_proof_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  multichain_proof_2_.Swap(&other->multichain_proof_2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenAggregatedMultichainProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenFinalMultichainProofRequest::InitAsDefaultInstance() {
}
class GenFinalMultichainProofRequest::_Internal {
 public:
};

GenFinalMultichainProofRequest::GenFinalMultichainProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GenFinalMultichainProofRequest)
}
GenFinalMultichainProofRequest::GenFinalMultichainProofRequest(const GenFinalMultichainProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multichain_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multichain_proof().empty()) {
    multichain_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_multichain_proof(),
      GetArena());
  }
  aggregator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aggregator_addr().empty()) {
    aggregator_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aggregator_addr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GenFinalMultichainProofRequest)
}

void GenFinalMultichainProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenFinalMultichainProofRequest_multichain_2eproto.base);
  multichain_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aggregator_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenFinalMultichainProofRequest::~GenFinalMultichainProofRequest() {
  // @@protoc_insertion_point(destructor:multichain.v1.GenFinalMultichainProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenFinalMultichainProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  multichain_proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aggregator_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenFinalMultichainProofRequest::ArenaDtor(void* object) {
  GenFinalMultichainProofRequest* _this = reinterpret_cast< GenFinalMultichainProofRequest* >(object);
  (void)_this;
}
void GenFinalMultichainProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenFinalMultichainProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenFinalMultichainProofRequest& GenFinalMultichainProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenFinalMultichainProofRequest_multichain_2eproto.base);
  return *internal_default_instance();
}


void GenFinalMultichainProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GenFinalMultichainProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multichain_proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aggregator_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenFinalMultichainProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string multichain_proof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_multichain_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenFinalMultichainProofRequest.multichain_proof"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aggregator_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_aggregator_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenFinalMultichainProofRequest.aggregator_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenFinalMultichainProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GenFinalMultichainProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string multichain_proof = 1;
  if (this->multichain_proof().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multichain_proof().data(), static_cast<int>(this->_internal_multichain_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenFinalMultichainProofRequest.multichain_proof");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_multichain_proof(), target);
  }

  // string aggregator_addr = 2;
  if (this->aggregator_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregator_addr().data(), static_cast<int>(this->_internal_aggregator_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenFinalMultichainProofRequest.aggregator_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_aggregator_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GenFinalMultichainProofRequest)
  return target;
}

size_t GenFinalMultichainProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GenFinalMultichainProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string multichain_proof = 1;
  if (this->multichain_proof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multichain_proof());
  }

  // string aggregator_addr = 2;
  if (this->aggregator_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregator_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenFinalMultichainProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GenFinalMultichainProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenFinalMultichainProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenFinalMultichainProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GenFinalMultichainProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GenFinalMultichainProofRequest)
    MergeFrom(*source);
  }
}

void GenFinalMultichainProofRequest::MergeFrom(const GenFinalMultichainProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GenFinalMultichainProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.multichain_proof().size() > 0) {
    _internal_set_multichain_proof(from._internal_multichain_proof());
  }
  if (from.aggregator_addr().size() > 0) {
    _internal_set_aggregator_addr(from._internal_aggregator_addr());
  }
}

void GenFinalMultichainProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GenFinalMultichainProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenFinalMultichainProofRequest::CopyFrom(const GenFinalMultichainProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GenFinalMultichainProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenFinalMultichainProofRequest::IsInitialized() const {
  return true;
}

void GenFinalMultichainProofRequest::InternalSwap(GenFinalMultichainProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  multichain_proof_.Swap(&other->multichain_proof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aggregator_addr_.Swap(&other->aggregator_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenFinalMultichainProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelRequest::InitAsDefaultInstance() {
}
class CancelRequest::_Internal {
 public:
};

CancelRequest::CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.CancelRequest)
}
CancelRequest::CancelRequest(const CancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.CancelRequest)
}

void CancelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelRequest_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelRequest::~CancelRequest() {
  // @@protoc_insertion_point(destructor:multichain.v1.CancelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelRequest::ArenaDtor(void* object) {
  CancelRequest* _this = reinterpret_cast< CancelRequest* >(object);
  (void)_this;
}
void CancelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelRequest& CancelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelRequest_multichain_2eproto.base);
  return *internal_default_instance();
}


void CancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.CancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.CancelRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.CancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.CancelRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.CancelRequest)
  return target;
}

size_t CancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.CancelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.CancelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.CancelRequest)
    MergeFrom(*source);
  }
}

void CancelRequest::MergeFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void CancelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelRequest::CopyFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRequest::IsInitialized() const {
  return true;
}

void CancelRequest::InternalSwap(CancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProofRequest::InitAsDefaultInstance() {
}
class GetProofRequest::_Internal {
 public:
};

GetProofRequest::GetProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GetProofRequest)
}
GetProofRequest::GetProofRequest(const GetProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GetProofRequest)
}

void GetProofRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProofRequest_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = PROTOBUF_ULONGLONG(0);
}

GetProofRequest::~GetProofRequest() {
  // @@protoc_insertion_point(destructor:multichain.v1.GetProofRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetProofRequest::ArenaDtor(void* object) {
  GetProofRequest* _this = reinterpret_cast< GetProofRequest* >(object);
  (void)_this;
}
void GetProofRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProofRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProofRequest& GetProofRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProofRequest_multichain_2eproto.base);
  return *internal_default_instance();
}


void GetProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GetProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeout_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProofRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetProofRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProofRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GetProofRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetProofRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GetProofRequest)
  return target;
}

size_t GetProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GetProofRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProofRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GetProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProofRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProofRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GetProofRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GetProofRequest)
    MergeFrom(*source);
  }
}

void GetProofRequest::MergeFrom(const GetProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GetProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void GetProofRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GetProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProofRequest::CopyFrom(const GetProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GetProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProofRequest::IsInitialized() const {
  return true;
}

void GetProofRequest::InternalSwap(GetProofRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProofRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateSha256Request::InitAsDefaultInstance() {
}
class CalculateSha256Request::_Internal {
 public:
};

CalculateSha256Request::CalculateSha256Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.CalculateSha256Request)
}
CalculateSha256Request::CalculateSha256Request(const CalculateSha256Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publics().empty()) {
    publics_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_publics(),
      GetArena());
  }
  previous_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_hash().empty()) {
    previous_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previous_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.CalculateSha256Request)
}

void CalculateSha256Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculateSha256Request_multichain_2eproto.base);
  publics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CalculateSha256Request::~CalculateSha256Request() {
  // @@protoc_insertion_point(destructor:multichain.v1.CalculateSha256Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalculateSha256Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  publics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalculateSha256Request::ArenaDtor(void* object) {
  CalculateSha256Request* _this = reinterpret_cast< CalculateSha256Request* >(object);
  (void)_this;
}
void CalculateSha256Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalculateSha256Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateSha256Request& CalculateSha256Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateSha256Request_multichain_2eproto.base);
  return *internal_default_instance();
}


void CalculateSha256Request::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.CalculateSha256Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publics_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculateSha256Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string publics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_publics();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.CalculateSha256Request.publics"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string previous_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_previous_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.CalculateSha256Request.previous_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateSha256Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.CalculateSha256Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string publics = 1;
  if (this->publics().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publics().data(), static_cast<int>(this->_internal_publics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.CalculateSha256Request.publics");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_publics(), target);
  }

  // string previous_hash = 2;
  if (this->previous_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_hash().data(), static_cast<int>(this->_internal_previous_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.CalculateSha256Request.previous_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_previous_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.CalculateSha256Request)
  return target;
}

size_t CalculateSha256Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.CalculateSha256Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string publics = 1;
  if (this->publics().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publics());
  }

  // string previous_hash = 2;
  if (this->previous_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateSha256Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.CalculateSha256Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateSha256Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateSha256Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.CalculateSha256Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.CalculateSha256Request)
    MergeFrom(*source);
  }
}

void CalculateSha256Request::MergeFrom(const CalculateSha256Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.CalculateSha256Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.publics().size() > 0) {
    _internal_set_publics(from._internal_publics());
  }
  if (from.previous_hash().size() > 0) {
    _internal_set_previous_hash(from._internal_previous_hash());
  }
}

void CalculateSha256Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.CalculateSha256Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateSha256Request::CopyFrom(const CalculateSha256Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.CalculateSha256Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateSha256Request::IsInitialized() const {
  return true;
}

void CalculateSha256Request::InternalSwap(CalculateSha256Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  publics_.Swap(&other->publics_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  previous_hash_.Swap(&other->previous_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateSha256Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusResponse::InitAsDefaultInstance() {
}
class GetStatusResponse::_Internal {
 public:
};

GetStatusResponse::GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pending_request_queue_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pending_request_queue_ids_(from.pending_request_queue_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_computed_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_computed_request_id().empty()) {
    last_computed_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_computed_request_id(),
      GetArena());
  }
  current_computing_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_computing_request_id().empty()) {
    current_computing_request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_computing_request_id(),
      GetArena());
  }
  version_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_proto().empty()) {
    version_proto_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_proto(),
      GetArena());
  }
  version_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_server().empty()) {
    version_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version_server(),
      GetArena());
  }
  prover_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_name().empty()) {
    prover_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_name(),
      GetArena());
  }
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_id().empty()) {
    prover_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_id(),
      GetArena());
  }
  ::memcpy(&last_computed_end_time_, &from.last_computed_end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GetStatusResponse)
}

void GetStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusResponse_multichain_2eproto.base);
  last_computed_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_computing_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_proto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(status_));
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:multichain.v1.GetStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_computed_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_computing_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_proto_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStatusResponse::ArenaDtor(void* object) {
  GetStatusResponse* _this = reinterpret_cast< GetStatusResponse* >(object);
  (void)_this;
}
void GetStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusResponse& GetStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusResponse_multichain_2eproto.base);
  return *internal_default_instance();
}


void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_request_queue_ids_.Clear();
  last_computed_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_computing_request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_proto_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&last_computed_end_time_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .multichain.v1.GetStatusResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::multichain::v1::GetStatusResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string last_computed_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_computed_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.last_computed_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_computed_end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_computed_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_computing_request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_current_computing_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.current_computing_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_computing_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_computing_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version_proto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.version_proto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_server = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_version_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.version_server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string pending_request_queue_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pending_request_queue_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.pending_request_queue_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string prover_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_prover_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.prover_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prover_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetStatusResponse.prover_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 number_of_cores = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          number_of_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_memory = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          total_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 free_memory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          free_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fork_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .multichain.v1.GetStatusResponse.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string last_computed_request_id = 2;
  if (this->last_computed_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_computed_request_id().data(), static_cast<int>(this->_internal_last_computed_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.last_computed_request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_computed_request_id(), target);
  }

  // uint64 last_computed_end_time = 3;
  if (this->last_computed_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_computed_end_time(), target);
  }

  // string current_computing_request_id = 4;
  if (this->current_computing_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_computing_request_id().data(), static_cast<int>(this->_internal_current_computing_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.current_computing_request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_computing_request_id(), target);
  }

  // uint64 current_computing_start_time = 5;
  if (this->current_computing_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_current_computing_start_time(), target);
  }

  // string version_proto = 6;
  if (this->version_proto().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_proto().data(), static_cast<int>(this->_internal_version_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.version_proto");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version_proto(), target);
  }

  // string version_server = 7;
  if (this->version_server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_server().data(), static_cast<int>(this->_internal_version_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.version_server");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_server(), target);
  }

  // repeated string pending_request_queue_ids = 8;
  for (int i = 0, n = this->_internal_pending_request_queue_ids_size(); i < n; i++) {
    const auto& s = this->_internal_pending_request_queue_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.pending_request_queue_ids");
    target = stream->WriteString(8, s, target);
  }

  // string prover_name = 9;
  if (this->prover_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_name().data(), static_cast<int>(this->_internal_prover_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.prover_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_prover_name(), target);
  }

  // string prover_id = 10;
  if (this->prover_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetStatusResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_prover_id(), target);
  }

  // uint64 number_of_cores = 11;
  if (this->number_of_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_number_of_cores(), target);
  }

  // uint64 total_memory = 12;
  if (this->total_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_total_memory(), target);
  }

  // uint64 free_memory = 13;
  if (this->free_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_free_memory(), target);
  }

  // uint64 fork_id = 14;
  if (this->fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_fork_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GetStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pending_request_queue_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pending_request_queue_ids_.size());
  for (int i = 0, n = pending_request_queue_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pending_request_queue_ids_.Get(i));
  }

  // string last_computed_request_id = 2;
  if (this->last_computed_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_computed_request_id());
  }

  // string current_computing_request_id = 4;
  if (this->current_computing_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_computing_request_id());
  }

  // string version_proto = 6;
  if (this->version_proto().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_proto());
  }

  // string version_server = 7;
  if (this->version_server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_server());
  }

  // string prover_name = 9;
  if (this->prover_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_name());
  }

  // string prover_id = 10;
  if (this->prover_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 last_computed_end_time = 3;
  if (this->last_computed_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_computed_end_time());
  }

  // uint64 current_computing_start_time = 5;
  if (this->current_computing_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_computing_start_time());
  }

  // uint64 number_of_cores = 11;
  if (this->number_of_cores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_number_of_cores());
  }

  // uint64 total_memory = 12;
  if (this->total_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_memory());
  }

  // uint64 free_memory = 13;
  if (this->free_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_free_memory());
  }

  // uint64 fork_id = 14;
  if (this->fork_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  // .multichain.v1.GetStatusResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GetStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GetStatusResponse)
    MergeFrom(*source);
  }
}

void GetStatusResponse::MergeFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_request_queue_ids_.MergeFrom(from.pending_request_queue_ids_);
  if (from.last_computed_request_id().size() > 0) {
    _internal_set_last_computed_request_id(from._internal_last_computed_request_id());
  }
  if (from.current_computing_request_id().size() > 0) {
    _internal_set_current_computing_request_id(from._internal_current_computing_request_id());
  }
  if (from.version_proto().size() > 0) {
    _internal_set_version_proto(from._internal_version_proto());
  }
  if (from.version_server().size() > 0) {
    _internal_set_version_server(from._internal_version_server());
  }
  if (from.prover_name().size() > 0) {
    _internal_set_prover_name(from._internal_prover_name());
  }
  if (from.prover_id().size() > 0) {
    _internal_set_prover_id(from._internal_prover_id());
  }
  if (from.last_computed_end_time() != 0) {
    _internal_set_last_computed_end_time(from._internal_last_computed_end_time());
  }
  if (from.current_computing_start_time() != 0) {
    _internal_set_current_computing_start_time(from._internal_current_computing_start_time());
  }
  if (from.number_of_cores() != 0) {
    _internal_set_number_of_cores(from._internal_number_of_cores());
  }
  if (from.total_memory() != 0) {
    _internal_set_total_memory(from._internal_total_memory());
  }
  if (from.free_memory() != 0) {
    _internal_set_free_memory(from._internal_free_memory());
  }
  if (from.fork_id() != 0) {
    _internal_set_fork_id(from._internal_fork_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pending_request_queue_ids_.InternalSwap(&other->pending_request_queue_ids_);
  last_computed_request_id_.Swap(&other->last_computed_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_computing_request_id_.Swap(&other->current_computing_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_proto_.Swap(&other->version_proto_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_server_.Swap(&other->version_server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_name_.Swap(&other->prover_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.Swap(&other->prover_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatusResponse, status_)
      + sizeof(GetStatusResponse::status_)
      - PROTOBUF_FIELD_OFFSET(GetStatusResponse, last_computed_end_time_)>(
          reinterpret_cast<char*>(&last_computed_end_time_),
          reinterpret_cast<char*>(&other->last_computed_end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenPrepareMultichainProofResponse::InitAsDefaultInstance() {
}
class GenPrepareMultichainProofResponse::_Internal {
 public:
};

GenPrepareMultichainProofResponse::GenPrepareMultichainProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GenPrepareMultichainProofResponse)
}
GenPrepareMultichainProofResponse::GenPrepareMultichainProofResponse(const GenPrepareMultichainProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GenPrepareMultichainProofResponse)
}

void GenPrepareMultichainProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenPrepareMultichainProofResponse_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GenPrepareMultichainProofResponse::~GenPrepareMultichainProofResponse() {
  // @@protoc_insertion_point(destructor:multichain.v1.GenPrepareMultichainProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenPrepareMultichainProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenPrepareMultichainProofResponse::ArenaDtor(void* object) {
  GenPrepareMultichainProofResponse* _this = reinterpret_cast< GenPrepareMultichainProofResponse* >(object);
  (void)_this;
}
void GenPrepareMultichainProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenPrepareMultichainProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenPrepareMultichainProofResponse& GenPrepareMultichainProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenPrepareMultichainProofResponse_multichain_2eproto.base);
  return *internal_default_instance();
}


void GenPrepareMultichainProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GenPrepareMultichainProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenPrepareMultichainProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenPrepareMultichainProofResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::multichain::v1::Result>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenPrepareMultichainProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GenPrepareMultichainProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenPrepareMultichainProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .multichain.v1.Result result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GenPrepareMultichainProofResponse)
  return target;
}

size_t GenPrepareMultichainProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GenPrepareMultichainProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .multichain.v1.Result result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenPrepareMultichainProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GenPrepareMultichainProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenPrepareMultichainProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenPrepareMultichainProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GenPrepareMultichainProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GenPrepareMultichainProofResponse)
    MergeFrom(*source);
  }
}

void GenPrepareMultichainProofResponse::MergeFrom(const GenPrepareMultichainProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GenPrepareMultichainProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GenPrepareMultichainProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GenPrepareMultichainProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenPrepareMultichainProofResponse::CopyFrom(const GenPrepareMultichainProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GenPrepareMultichainProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenPrepareMultichainProofResponse::IsInitialized() const {
  return true;
}

void GenPrepareMultichainProofResponse::InternalSwap(GenPrepareMultichainProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenPrepareMultichainProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenAggregatedMultichainProofResponse::InitAsDefaultInstance() {
}
class GenAggregatedMultichainProofResponse::_Internal {
 public:
};

GenAggregatedMultichainProofResponse::GenAggregatedMultichainProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GenAggregatedMultichainProofResponse)
}
GenAggregatedMultichainProofResponse::GenAggregatedMultichainProofResponse(const GenAggregatedMultichainProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GenAggregatedMultichainProofResponse)
}

void GenAggregatedMultichainProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenAggregatedMultichainProofResponse_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GenAggregatedMultichainProofResponse::~GenAggregatedMultichainProofResponse() {
  // @@protoc_insertion_point(destructor:multichain.v1.GenAggregatedMultichainProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenAggregatedMultichainProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenAggregatedMultichainProofResponse::ArenaDtor(void* object) {
  GenAggregatedMultichainProofResponse* _this = reinterpret_cast< GenAggregatedMultichainProofResponse* >(object);
  (void)_this;
}
void GenAggregatedMultichainProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenAggregatedMultichainProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenAggregatedMultichainProofResponse& GenAggregatedMultichainProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenAggregatedMultichainProofResponse_multichain_2eproto.base);
  return *internal_default_instance();
}


void GenAggregatedMultichainProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GenAggregatedMultichainProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenAggregatedMultichainProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenAggregatedMultichainProofResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::multichain::v1::Result>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenAggregatedMultichainProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GenAggregatedMultichainProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenAggregatedMultichainProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .multichain.v1.Result result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GenAggregatedMultichainProofResponse)
  return target;
}

size_t GenAggregatedMultichainProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GenAggregatedMultichainProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .multichain.v1.Result result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenAggregatedMultichainProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GenAggregatedMultichainProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenAggregatedMultichainProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenAggregatedMultichainProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GenAggregatedMultichainProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GenAggregatedMultichainProofResponse)
    MergeFrom(*source);
  }
}

void GenAggregatedMultichainProofResponse::MergeFrom(const GenAggregatedMultichainProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GenAggregatedMultichainProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GenAggregatedMultichainProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GenAggregatedMultichainProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenAggregatedMultichainProofResponse::CopyFrom(const GenAggregatedMultichainProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GenAggregatedMultichainProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenAggregatedMultichainProofResponse::IsInitialized() const {
  return true;
}

void GenAggregatedMultichainProofResponse::InternalSwap(GenAggregatedMultichainProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenAggregatedMultichainProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenFinalMultichainProofResponse::InitAsDefaultInstance() {
}
class GenFinalMultichainProofResponse::_Internal {
 public:
};

GenFinalMultichainProofResponse::GenFinalMultichainProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GenFinalMultichainProofResponse)
}
GenFinalMultichainProofResponse::GenFinalMultichainProofResponse(const GenFinalMultichainProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GenFinalMultichainProofResponse)
}

void GenFinalMultichainProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenFinalMultichainProofResponse_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GenFinalMultichainProofResponse::~GenFinalMultichainProofResponse() {
  // @@protoc_insertion_point(destructor:multichain.v1.GenFinalMultichainProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenFinalMultichainProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenFinalMultichainProofResponse::ArenaDtor(void* object) {
  GenFinalMultichainProofResponse* _this = reinterpret_cast< GenFinalMultichainProofResponse* >(object);
  (void)_this;
}
void GenFinalMultichainProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenFinalMultichainProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenFinalMultichainProofResponse& GenFinalMultichainProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenFinalMultichainProofResponse_multichain_2eproto.base);
  return *internal_default_instance();
}


void GenFinalMultichainProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GenFinalMultichainProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenFinalMultichainProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GenFinalMultichainProofResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::multichain::v1::Result>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenFinalMultichainProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GenFinalMultichainProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GenFinalMultichainProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .multichain.v1.Result result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GenFinalMultichainProofResponse)
  return target;
}

size_t GenFinalMultichainProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GenFinalMultichainProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .multichain.v1.Result result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenFinalMultichainProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GenFinalMultichainProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenFinalMultichainProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenFinalMultichainProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GenFinalMultichainProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GenFinalMultichainProofResponse)
    MergeFrom(*source);
  }
}

void GenFinalMultichainProofResponse::MergeFrom(const GenFinalMultichainProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GenFinalMultichainProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GenFinalMultichainProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GenFinalMultichainProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenFinalMultichainProofResponse::CopyFrom(const GenFinalMultichainProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GenFinalMultichainProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenFinalMultichainProofResponse::IsInitialized() const {
  return true;
}

void GenFinalMultichainProofResponse::InternalSwap(GenFinalMultichainProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenFinalMultichainProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelResponse::InitAsDefaultInstance() {
}
class CancelResponse::_Internal {
 public:
};

CancelResponse::CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.CancelResponse)
}
CancelResponse::CancelResponse(const CancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:multichain.v1.CancelResponse)
}

void CancelResponse::SharedCtor() {
  result_ = 0;
}

CancelResponse::~CancelResponse() {
  // @@protoc_insertion_point(destructor:multichain.v1.CancelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelResponse::ArenaDtor(void* object) {
  CancelResponse* _this = reinterpret_cast< CancelResponse* >(object);
  (void)_this;
}
void CancelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponse& CancelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelResponse_multichain_2eproto.base);
  return *internal_default_instance();
}


void CancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.CancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .multichain.v1.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::multichain::v1::Result>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.CancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .multichain.v1.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.CancelResponse)
  return target;
}

size_t CancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.CancelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .multichain.v1.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.CancelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.CancelResponse)
    MergeFrom(*source);
  }
}

void CancelResponse::MergeFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void CancelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponse::CopyFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponse::IsInitialized() const {
  return true;
}

void CancelResponse::InternalSwap(CancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetProofResponse::InitAsDefaultInstance() {
  ::multichain::v1::_GetProofResponse_default_instance_.prepare_proof_ = const_cast< ::multichain::v1::PrepareProof*>(
      ::multichain::v1::PrepareProof::internal_default_instance());
  ::multichain::v1::_GetProofResponse_default_instance_.multichain_proof_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class GetProofResponse::_Internal {
 public:
  static const ::multichain::v1::PrepareProof& prepare_proof(const GetProofResponse* msg);
};

const ::multichain::v1::PrepareProof&
GetProofResponse::_Internal::prepare_proof(const GetProofResponse* msg) {
  return *msg->proof_.prepare_proof_;
}
void GetProofResponse::set_allocated_prepare_proof(::multichain::v1::PrepareProof* prepare_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_proof();
  if (prepare_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prepare_proof);
    if (message_arena != submessage_arena) {
      prepare_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_proof, submessage_arena);
    }
    set_has_prepare_proof();
    proof_.prepare_proof_ = prepare_proof;
  }
  // @@protoc_insertion_point(field_set_allocated:multichain.v1.GetProofResponse.prepare_proof)
}
GetProofResponse::GetProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.GetProofResponse)
}
GetProofResponse::GetProofResponse(const GetProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_string().empty()) {
    result_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_string(),
      GetArena());
  }
  result_ = from.result_;
  clear_has_proof();
  switch (from.proof_case()) {
    case kPrepareProof: {
      _internal_mutable_prepare_proof()->::multichain::v1::PrepareProof::MergeFrom(from._internal_prepare_proof());
      break;
    }
    case kMultichainProof: {
      _internal_set_multichain_proof(from._internal_multichain_proof());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.GetProofResponse)
}

void GetProofResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetProofResponse_multichain_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  clear_has_proof();
}

GetProofResponse::~GetProofResponse() {
  // @@protoc_insertion_point(destructor:multichain.v1.GetProofResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_proof()) {
    clear_proof();
  }
}

void GetProofResponse::ArenaDtor(void* object) {
  GetProofResponse* _this = reinterpret_cast< GetProofResponse* >(object);
  (void)_this;
}
void GetProofResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetProofResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetProofResponse& GetProofResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetProofResponse_multichain_2eproto.base);
  return *internal_default_instance();
}


void GetProofResponse::clear_proof() {
// @@protoc_insertion_point(one_of_clear_start:multichain.v1.GetProofResponse)
  switch (proof_case()) {
    case kPrepareProof: {
      if (GetArena() == nullptr) {
        delete proof_.prepare_proof_;
      }
      break;
    }
    case kMultichainProof: {
      proof_.multichain_proof_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROOF_NOT_SET;
}


void GetProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.GetProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = 0;
  clear_proof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProofResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetProofResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.PrepareProof prepare_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multichain_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_multichain_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetProofResponse.multichain_proof"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .multichain.v1.GetProofResponse.Result result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::multichain::v1::GetProofResponse_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.GetProofResponse.result_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetProofResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.GetProofResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .multichain.v1.PrepareProof prepare_proof = 2;
  if (_internal_has_prepare_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prepare_proof(this), target, stream);
  }

  // string multichain_proof = 3;
  if (_internal_has_multichain_proof()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multichain_proof().data(), static_cast<int>(this->_internal_multichain_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetProofResponse.multichain_proof");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_multichain_proof(), target);
  }

  // .multichain.v1.GetProofResponse.Result result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // string result_string = 5;
  if (this->result_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.GetProofResponse.result_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_result_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.GetProofResponse)
  return target;
}

size_t GetProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.GetProofResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string result_string = 5;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .multichain.v1.GetProofResponse.Result result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  switch (proof_case()) {
    // .multichain.v1.PrepareProof prepare_proof = 2;
    case kPrepareProof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proof_.prepare_proof_);
      break;
    }
    // string multichain_proof = 3;
    case kMultichainProof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_multichain_proof());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetProofResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.GetProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetProofResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetProofResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.GetProofResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.GetProofResponse)
    MergeFrom(*source);
  }
}

void GetProofResponse::MergeFrom(const GetProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.GetProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result_string().size() > 0) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  switch (from.proof_case()) {
    case kPrepareProof: {
      _internal_mutable_prepare_proof()->::multichain::v1::PrepareProof::MergeFrom(from._internal_prepare_proof());
      break;
    }
    case kMultichainProof: {
      _internal_set_multichain_proof(from._internal_multichain_proof());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
}

void GetProofResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.GetProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProofResponse::CopyFrom(const GetProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.GetProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProofResponse::IsInitialized() const {
  return true;
}

void GetProofResponse::InternalSwap(GetProofResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.Swap(&other->result_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
  swap(proof_, other->proof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProofResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareProof::InitAsDefaultInstance() {
}
class PrepareProof::_Internal {
 public:
};

PrepareProof::PrepareProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.PrepareProof)
}
PrepareProof::PrepareProof(const PrepareProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proof().empty()) {
    proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proof(),
      GetArena());
  }
  hash_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash_info().empty()) {
    hash_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash_info(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.PrepareProof)
}

void PrepareProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrepareProof_multichain_2eproto.base);
  proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PrepareProof::~PrepareProof() {
  // @@protoc_insertion_point(destructor:multichain.v1.PrepareProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareProof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrepareProof::ArenaDtor(void* object) {
  PrepareProof* _this = reinterpret_cast< PrepareProof* >(object);
  (void)_this;
}
void PrepareProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareProof& PrepareProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareProof_multichain_2eproto.base);
  return *internal_default_instance();
}


void PrepareProof::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.PrepareProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string proof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.PrepareProof.proof"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.PrepareProof.hash_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.PrepareProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proof = 1;
  if (this->proof().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proof().data(), static_cast<int>(this->_internal_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.PrepareProof.proof");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proof(), target);
  }

  // string hash_info = 2;
  if (this->hash_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash_info().data(), static_cast<int>(this->_internal_hash_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.PrepareProof.hash_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.PrepareProof)
  return target;
}

size_t PrepareProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.PrepareProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proof = 1;
  if (this->proof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proof());
  }

  // string hash_info = 2;
  if (this->hash_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.PrepareProof)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.PrepareProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.PrepareProof)
    MergeFrom(*source);
  }
}

void PrepareProof::MergeFrom(const PrepareProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.PrepareProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proof().size() > 0) {
    _internal_set_proof(from._internal_proof());
  }
  if (from.hash_info().size() > 0) {
    _internal_set_hash_info(from._internal_hash_info());
  }
}

void PrepareProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.PrepareProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareProof::CopyFrom(const PrepareProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.PrepareProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareProof::IsInitialized() const {
  return true;
}

void PrepareProof::InternalSwap(PrepareProof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proof_.Swap(&other->proof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hash_info_.Swap(&other->hash_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareProof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateSha256Response::InitAsDefaultInstance() {
}
class CalculateSha256Response::_Internal {
 public:
};

CalculateSha256Response::CalculateSha256Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:multichain.v1.CalculateSha256Response)
}
CalculateSha256Response::CalculateSha256Response(const CalculateSha256Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  out_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_out_hash().empty()) {
    out_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_out_hash(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:multichain.v1.CalculateSha256Response)
}

void CalculateSha256Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculateSha256Response_multichain_2eproto.base);
  out_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CalculateSha256Response::~CalculateSha256Response() {
  // @@protoc_insertion_point(destructor:multichain.v1.CalculateSha256Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalculateSha256Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  out_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalculateSha256Response::ArenaDtor(void* object) {
  CalculateSha256Response* _this = reinterpret_cast< CalculateSha256Response* >(object);
  (void)_this;
}
void CalculateSha256Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalculateSha256Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateSha256Response& CalculateSha256Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateSha256Response_multichain_2eproto.base);
  return *internal_default_instance();
}


void CalculateSha256Response::Clear() {
// @@protoc_insertion_point(message_clear_start:multichain.v1.CalculateSha256Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculateSha256Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string out_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_out_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multichain.v1.CalculateSha256Response.out_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateSha256Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multichain.v1.CalculateSha256Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string out_hash = 1;
  if (this->out_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_out_hash().data(), static_cast<int>(this->_internal_out_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multichain.v1.CalculateSha256Response.out_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_out_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multichain.v1.CalculateSha256Response)
  return target;
}

size_t CalculateSha256Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multichain.v1.CalculateSha256Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string out_hash = 1;
  if (this->out_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_out_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateSha256Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multichain.v1.CalculateSha256Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateSha256Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateSha256Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multichain.v1.CalculateSha256Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multichain.v1.CalculateSha256Response)
    MergeFrom(*source);
  }
}

void CalculateSha256Response::MergeFrom(const CalculateSha256Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multichain.v1.CalculateSha256Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.out_hash().size() > 0) {
    _internal_set_out_hash(from._internal_out_hash());
  }
}

void CalculateSha256Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multichain.v1.CalculateSha256Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateSha256Response::CopyFrom(const CalculateSha256Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multichain.v1.CalculateSha256Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateSha256Response::IsInitialized() const {
  return true;
}

void CalculateSha256Response::InternalSwap(CalculateSha256Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  out_hash_.Swap(&other->out_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateSha256Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace multichain
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::multichain::v1::Version* Arena::CreateMaybeMessage< ::multichain::v1::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::MultichainMessage* Arena::CreateMaybeMessage< ::multichain::v1::MultichainMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::MultichainMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::ProverMessage* Arena::CreateMaybeMessage< ::multichain::v1::ProverMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::ProverMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GetStatusRequest* Arena::CreateMaybeMessage< ::multichain::v1::GetStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GetStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GenPrepareMultichainProofRequest* Arena::CreateMaybeMessage< ::multichain::v1::GenPrepareMultichainProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GenPrepareMultichainProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GenAggregatedMultichainProofRequest* Arena::CreateMaybeMessage< ::multichain::v1::GenAggregatedMultichainProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GenAggregatedMultichainProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GenFinalMultichainProofRequest* Arena::CreateMaybeMessage< ::multichain::v1::GenFinalMultichainProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GenFinalMultichainProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::CancelRequest* Arena::CreateMaybeMessage< ::multichain::v1::CancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::CancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GetProofRequest* Arena::CreateMaybeMessage< ::multichain::v1::GetProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GetProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::CalculateSha256Request* Arena::CreateMaybeMessage< ::multichain::v1::CalculateSha256Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::CalculateSha256Request >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GetStatusResponse* Arena::CreateMaybeMessage< ::multichain::v1::GetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GetStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GenPrepareMultichainProofResponse* Arena::CreateMaybeMessage< ::multichain::v1::GenPrepareMultichainProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GenPrepareMultichainProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GenAggregatedMultichainProofResponse* Arena::CreateMaybeMessage< ::multichain::v1::GenAggregatedMultichainProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GenAggregatedMultichainProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GenFinalMultichainProofResponse* Arena::CreateMaybeMessage< ::multichain::v1::GenFinalMultichainProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GenFinalMultichainProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::CancelResponse* Arena::CreateMaybeMessage< ::multichain::v1::CancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::CancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::GetProofResponse* Arena::CreateMaybeMessage< ::multichain::v1::GetProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::GetProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::PrepareProof* Arena::CreateMaybeMessage< ::multichain::v1::PrepareProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::PrepareProof >(arena);
}
template<> PROTOBUF_NOINLINE ::multichain::v1::CalculateSha256Response* Arena::CreateMaybeMessage< ::multichain::v1::CalculateSha256Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::multichain::v1::CalculateSha256Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
